<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TeleCore</name>
    </assembly>
    <members>
        <member name="M:TeleCore.ComputeGrid`1.Dispose">
            <summary>
                Clear internal <see cref="T:UnityEngine.ComputeBuffer" />
            </summary>
        </member>
        <member name="M:TeleCore.ComputeGrid`1.SetValues_Array(System.Collections.Generic.IEnumerable{Verse.IntVec3},System.Func{Verse.IntVec3,`0})">
            <summary>
                Sets data to the grid array and does not invoke the ComputeBuffer update.
            </summary>
        </member>
        <member name="M:TeleCore.ComputeGrid`1.SetValue_Array(Verse.IntVec3,`0)">
            <summary>
                Sets data to the grid array and does not invoke the ComputeBuffer update.
            </summary>
        </member>
        <member name="M:TeleCore.GPUTools.CopyRenderTexture(UnityEngine.Texture,UnityEngine.RenderTexture)">
            Copy the contents of one render texture into another. Assumes textures are the same size.
        </member>
        <member name="T:TeleCore.ProjectileDefExtension">
            <summary>
                If set on a projectile's def, on Impact, all of these effects will be created - if available.
            </summary>
        </member>
        <member name="M:TeleCore.FlowCore.FlowVolume`1.OnContainerStateChanged(System.Double,System.Boolean)">
            <summary>
                Internal container state logic notifier.
            </summary>
        </member>
        <member name="M:TeleCore.FlowCore.FlowVolume`1.Clear">
            <summary>
                Clears all values inside the container.
            </summary>
        </member>
        <member name="M:TeleCore.FlowCore.FlowVolume`1.Fill(System.Int32)">
            <summary>
                Clears all values inside the container.
            </summary>
        </member>
        <member name="M:TeleCore.FlowCore.FlowVolume`1.TryAdd(`0,System.Double)">
            <summary>
            Tries to add as much as possible from a value.
            </summary>
        </member>
        <member name="M:TeleCore.FlowCore.FlowVolume`1.TryTransferOrFail(TeleCore.FlowCore.FlowVolume{`0},TeleCore.Primitive.DefValue{`0,System.Double})">
            <summary>
            Tries to transfer a fixed DefValue, fails when the full amount cannot be transfered.
            </summary>
        </member>
        <member name="M:TeleCore.FlowCore.FlowVolume`1.TryTransfer(TeleCore.FlowCore.FlowVolume{`0},TeleCore.Primitive.DefValue{`0,System.Double})">
            <summary>
            Tries to transfer as much as possible.
            </summary>
        </member>
        <member name="M:TeleCore.FlowCore.FlowVolume`1.TryConsumeOrFail(`0,System.Double)">
            <summary>
            Tries to consume a fixed amount, fails if there is not enough to consume.
            </summary>
        </member>
        <member name="M:TeleCore.FlowCore.FlowVolume`1.TryConsume(`0,System.Double)">
            <summary>
            Tries to consume as much as possible of the required amount.
            </summary>
        </member>
        <member name="T:TeleCore.Generics.TwoWayKey`1">
            <summary>
            A key to define a two-way relationship between two objects.
            Meant for tuples of two object of the same type, to ignore ordering of the tuple.
            </summary>
        </member>
        <member name="P:TeleCore.Network.Data.INetworkPart.IsReady">
            <summary>
            Determines whether this part has been assigned a <see cref="P:TeleCore.Network.Data.INetworkPart.Network"/>.
            </summary>
        </member>
        <member name="P:TeleCore.Network.Data.INetworkPart.IsWorking">
            <summary>
            Determines whether the part is active.
            </summary>
        </member>
        <member name="P:TeleCore.Network.Data.NetworkValueFilter.AllowedValuesByRole">
            <summary>
                Provides sub-managed values by role, if set in the networkRole props.
            </summary>
        </member>
        <member name="T:TeleCore.Network.Data.NetworkValueFilterByRole">
            <summary>
                <para>Allows to set a network value filter for a specific role.</para>
                <para>For example: Storage role allows to contain type A, B, C</para>
                <para>While Requester role only allows to request B, C</para>
            </summary>
        </member>
        <member name="P:TeleCore.Network.Flow.Clamping.ClampWorker.EnforceMinPipe">
            <summary>
                "Enforce pipe min content (= 0)"
            </summary>
        </member>
        <member name="P:TeleCore.Network.Flow.Clamping.ClampWorker.EnforceMaxPipe">
            <summary>
                "Enforce pipe max content (= 100)"
            </summary>
        </member>
        <member name="P:TeleCore.Network.Flow.Clamping.ClampWorker.MaintainFlowSpeed">
            <summary>
                "Do not reduce flow speed when clamping"
            </summary>
        </member>
        <member name="P:TeleCore.Network.Flow.Clamping.ClampWorker.MinDivider">
            <summary>
                "Divider for available fluid [1..4]"
            </summary>
        </member>
        <member name="P:TeleCore.Network.Flow.Clamping.ClampWorker.MaxDivider">
            <summary>
                "Divider for remaining space [1..4]"
            </summary>
        </member>
        <member name="T:TeleCore.Network.Flow.NetworkSystem">
            <summary>
                The main algorithm container for fluid flow.
            </summary>
        </member>
        <member name="T:TeleCore.Network.Flow.NetworkVolume">
            <summary>
                The logical handler for fluid flow.
                Area and height define the total content, elevation allows for flow control.
            </summary>
        </member>
        <member name="T:TeleCore.Network.IO.IOCellPrototype">
            <summary>
                Meant to be set and created in XML
            </summary>
        </member>
        <member name="T:TeleCore.Network.IO.IOCell">
            <summary>
                Implements the actual IO Cell of NetworkPart
            </summary>
        </member>
        <member name="P:TeleCore.Network.IO.IOConnectionResult.SelfConnPos">
            <summary>
            The position on the OTHER network part that this part connected to.
            </summary>
        </member>
        <member name="P:TeleCore.Network.IO.IOConnectionResult.OtherConnPos">
            <summary>
            The position on THIS network part that the other part connected to.
            </summary>
        </member>
        <member name="T:TeleCore.Network.IO.NetIOConfig">
            <summary>
                The config for the IO cells around a network structure.
                <para>The IO modes are noted in<see cref="T:TeleCore.Network.Utility.IOUtils"/></para>
            </summary>
        </member>
        <member name="T:TeleCore.Network.IO.NetworkIO">
            <summary>
            </summary>
        </member>
        <member name="M:TeleCore.Network.PipeNetworkMapInfo.HasConnectionAtFor(Verse.Thing,Verse.IntVec3)">
            <summary>
                This checks whether any directly connected parts exist for Linking Graphics.
            </summary>
        </member>
        <member name="M:TeleCore.Network.Utility.IOUtils.RotateIOCells(TeleCore.Network.IO.IOCell[],Verse.Rot4,Verse.IntVec2)">
            <summary>
                Rotates the pattern array to match the rotation of the thing.
            </summary>
        </member>
        <member name="M:TeleCore.Network.Utility.PipeNetworkFactory.Fits(Verse.Thing,TeleCore.NetworkDef,TeleCore.Network.Data.INetworkPart@)">
            <summary>
            Checks whether or not a thing is part of a specific network.
            </summary>
        </member>
        <member name="T:TeleCore.IFXBase">
            <summary>
                <para>
                    Implementing this on a <see cref="T:Verse.ThingComp" /> or <see cref="T:Verse.Thing" /> allows you to affect the layers in a
                    <see cref="T:TeleCore.CompFX" /> attached to the same Thing instance.
                </para>
                <para>
                    You can implement this interface on multiple parts of a Thing instance, including the base
                    <see cref="F:Verse.ThingDef.thingClass" /> and the <see cref="F:Verse.ThingDef.comps" />.
                </para>
                <para>
                    If multiple implementations are active, the order of priority for selecting an interface for a layer via
                    <see cref="!:FX_AffectsLayerAt" /> or for <see cref="!:IsMain" /> is done by <see cref="T:HarmonyLib.Priority" />.
                </para>
            </summary>
        </member>
        <member name="M:TeleCore.IFXBase.FX_ProvidesForLayer(TeleCore.Data.Events.FXArgs)">
            <summary>
            </summary>
        </member>
        <member name="M:TeleCore.IFXBase.FX_PowerProviderFor(TeleCore.Data.Events.FXArgs)">
            <summary>
                Allows you to override the default power getter with a custom reference, otherwise it defaults to the parent
                Thing's PowerComp (if it exists)
            </summary>
        </member>
        <member name="M:TeleCore.IFXEffecterProvider.FX_ShouldThrowEffects(TeleCore.Data.Events.FXEffecterArgs)">
            <summary>
                Sets whether or not an attached Comp_FleckThrower should throw effects.
            </summary>
        </member>
        <member name="M:TeleCore.IFXEffecterProvider.FX_OnEffectSpawned(TeleCore.Data.Events.FXEffecterSpawnedEventArgs)">
            <summary>
                Allows you to hook into the effecter logic, and handle custom logic whenever a tagged effect is spawned.
            </summary>
        </member>
        <member name="M:TeleCore.IFXLayerProvider.FX_SelectedGraphicIndex(TeleCore.Data.Events.FXLayerArgs)">
            <summary>
                Sets the index of the graphic to choose for Graphic_Selectable layers.
            </summary>
        </member>
        <member name="M:TeleCore.IFXLayerProvider.FX_ShouldDraw(TeleCore.Data.Events.FXLayerArgs)">
            <summary>
                Overrides whether a layer at the same index of that value is rendered or not.
            </summary>
        </member>
        <member name="M:TeleCore.IFXLayerProvider.FX_GetOpacity(TeleCore.Data.Events.FXLayerArgs)">
            <summary>
                Sets the opacity value of a layer at the same index as the value in the array.
            </summary>
        </member>
        <member name="M:TeleCore.IFXLayerProvider.FX_GetRotation(TeleCore.Data.Events.FXLayerArgs)">
            <summary>
                Sets the rotation value of a layer at the same index as the value in the array.
            </summary>
        </member>
        <member name="M:TeleCore.IFXLayerProvider.FX_GetRotationSpeedOverride(TeleCore.Data.Events.FXLayerArgs)">
            <summary>
            </summary>
        </member>
        <member name="M:TeleCore.IFXLayerProvider.FX_GetAnimationSpeedFactor(TeleCore.Data.Events.FXLayerArgs)">
            <summary>
                Sets the speed at which the layer processes dynamic images (rotating, blinking, moving)
            </summary>
        </member>
        <member name="M:TeleCore.IFXLayerProvider.FX_GetColor(TeleCore.Data.Events.FXLayerArgs)">
            <summary>
                Overrides the draw color of the layer at the index of the value.
            </summary>
        </member>
        <member name="M:TeleCore.IFXLayerProvider.FX_GetDrawPosition(TeleCore.Data.Events.FXLayerArgs)">
            <summary>
                Sets the exact render position of the layer at the index of that value.
            </summary>
        </member>
        <member name="M:TeleCore.IFXLayerProvider.FX_GetDrawFunc(TeleCore.Data.Events.FXLayerArgs)">
            <summary>
                Attaches a custom function to a layer, it is run before the layer is drawn.
                Returns a bool which defines where the actual layer draw function should be run.
            </summary>
        </member>
        <member name="M:TeleCore.MapInformation.InfoInit(System.Boolean)">
            <summary>
                Initializier run on MapComponent.FinalizeInit
            </summary>
            <param name="initAfterReload"></param>
        </member>
        <member name="M:TeleCore.MapInformation.ThreadSafeInit">
            <summary>
                Thread safe initializer for data on the main game thread
            </summary>
        </member>
        <member name="M:TeleCore.MapInformation.OnMapGenerated">
            <summary>
                Runs on MapComponent.MapGenerated
            </summary>
        </member>
        <member name="M:TeleCore.MapInformation.TeleTick">
            <summary>
                This tick is called by the TeleRoot Monobehaviour, offloading work from the RW Root.
            </summary>
        </member>
        <member name="M:TeleCore.MapInformation.CellSteadyEffect(Verse.IntVec3)">
            <summary>
                Allows to run code on each cell on a map, similar to GameConditions.
            </summary>
            <param name="c">Affected Celll</param>
        </member>
        <member name="M:TeleCore.MapInformation.UpdateOnGUI">
            <summary>
                Allows to run custom UI render code.
            </summary>
        </member>
        <member name="M:TeleCore.MapInformation.Update">
            <summary>
                Allows to run custom map rendering code.
            </summary>
        </member>
        <member name="M:TeleCore.MapInformation.TeleUpdate">
            <summary>
                This update is called from the TeleRoot Monobehaviour, offloading rendering from the RW Root.
            </summary>
        </member>
        <member name="T:TeleCore.PlaySettingsWorker">
            <summary>
                Provides an entry point to add a custom PlaySettings Option
            </summary>
        </member>
        <member name="T:TeleCore.Primitive.DefValue`2">
            <summary>
                Wraps any <see cref="P:TeleCore.Primitive.DefValue`2.Def" /> Type into a struct, attaching a numeric value
            </summary>
            <typeparam name="TDef">The <see cref="P:TeleCore.Primitive.DefValue`2.Def" /> Type of the value.</typeparam>
            <typeparam name="TValue">The numeric Type of the value.</typeparam>
        </member>
        <member name="T:TeleCore.Primitive.DefValueStack`2">
            <summary>
                Manages any Def as a numeric value in a stack.
            </summary>
            <typeparam name="TDef">The <see cref="T:Verse.Def" /> of the stack.</typeparam>
            <typeparam name="TValue">The numeric type of the stack.</typeparam>
        </member>
        <member name="T:TeleCore.Primitive.Immutable.DisposableEnumeratorAdapter`2">
            <summary>
            An adapter that allows a single foreach loop in C# to avoid
            boxing an enumerator when possible, but fall back to boxing when necessary.
            </summary>
            <typeparam name="T">The type of value to be enumerated.</typeparam>
            <typeparam name="TEnumerator">The type of the enumerator struct.</typeparam>
        </member>
        <member name="F:TeleCore.Primitive.Immutable.DisposableEnumeratorAdapter`2._enumeratorObject">
            <summary>
            The enumerator object to use if not null.
            </summary>
        </member>
        <member name="F:TeleCore.Primitive.Immutable.DisposableEnumeratorAdapter`2._enumeratorStruct">
            <summary>
            The enumerator struct to use if <see cref="F:TeleCore.Primitive.Immutable.DisposableEnumeratorAdapter`2._enumeratorObject"/> is <c>null</c>.
            </summary>
            <remarks>
            This field must NOT be readonly because the field's value is a struct and must be able to mutate
            in-place. A readonly keyword would cause any mutation to take place in a copy rather than the field.
            </remarks>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.DisposableEnumeratorAdapter`2.#ctor(`1)">
            <summary>
            Initializes a new instance of the <see cref="T:TeleCore.Primitive.Immutable.DisposableEnumeratorAdapter`2"/> struct
            for enumerating over a strongly typed struct enumerator.
            </summary>
            <param name="enumerator">The initialized enumerator struct.</param>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.DisposableEnumeratorAdapter`2.#ctor(System.Collections.Generic.IEnumerator{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:TeleCore.Primitive.Immutable.DisposableEnumeratorAdapter`2"/> struct
            for enumerating over a (boxed) <see cref="T:System.Collections.Generic.IEnumerable`1"/> enumerator.
            </summary>
            <param name="enumerator">The initialized enumerator object.</param>
        </member>
        <member name="P:TeleCore.Primitive.Immutable.DisposableEnumeratorAdapter`2.Current">
            <summary>
            Gets the current enumerated value.
            </summary>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.DisposableEnumeratorAdapter`2.MoveNext">
            <summary>
            Moves to the next value.
            </summary>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.DisposableEnumeratorAdapter`2.Dispose">
            <summary>
            Disposes the underlying enumerator.
            </summary>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.DisposableEnumeratorAdapter`2.GetEnumerator">
            <summary>
            Returns a copy of this struct.
            </summary>
            <remarks>
            This member is here so that it can be used in C# foreach loops.
            </remarks>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.DisposableEnumeratorAdapter`2.GetCurrentEnumerator">
            <summary>
            Get the current enumerator object which has to be used.
            </summary>
        </member>
        <member name="T:TeleCore.Primitive.Immutable.IImmutableArray">
            <summary>
            An internal non-generic interface implemented by <see cref="T:TeleCore.Primitive.Immutable.ImmutableArray`1"/>
            that allows for recognition of an <see cref="T:TeleCore.Primitive.Immutable.ImmutableArray`1"/> instance and access
            to its underlying array, without actually knowing the type of value
            stored in it.
            </summary>
            <remarks>
            Casting to this interface requires a boxed instance of the <see cref="T:TeleCore.Primitive.Immutable.ImmutableArray`1"/> struct,
            and as such should be avoided. This interface is useful, however, where the value
            is already boxed and we want to try to reuse immutable arrays instead of copying them.
            ** This interface is INTENTIONALLY INTERNAL, as it gives access to the inner array.  **
            </remarks>
        </member>
        <member name="P:TeleCore.Primitive.Immutable.IImmutableArray.Array">
            <summary>
            Gets an untyped reference to the array.
            </summary>
        </member>
        <member name="P:TeleCore.Primitive.Immutable.IImmutableArray`1.Array">
            <summary>
            Gets an untyped reference to the array.
            </summary>
        </member>
        <member name="T:TeleCore.Primitive.Immutable.IImmutableList`1">
            <summary>
             A list of elements that can only be modified by creating a new instance of the list.
            </summary>
            <typeparam name="T">The type of element stored in the list.</typeparam>
            <remarks>
            Mutations on this list generate new lists.  Incremental changes to a list share as much memory as possible with the prior versions of a list,
            while allowing garbage collection to clean up any unique list data that is no longer being referenced.
            </remarks>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.IImmutableList`1.Clear">
            <summary>
            Gets an empty list that retains the same sort semantics that this instance has.
            </summary>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.IImmutableList`1.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Searches for the specified object and returns the zero-based index of the
            first occurrence within the range of elements in the <see cref="!:ImmutableList&lt;T&gt;"/>
            that starts at the specified index and contains the specified number of elements.
            </summary>
            <param name="item">
            The object to locate in the <see cref="!:ImmutableList&lt;T&gt;"/>. The value
            can be null for reference types.
            </param>
            <param name="index">
            The zero-based starting index of the search. 0 (zero) is valid in an empty
            list.
            </param>
            <param name="count">
            The number of elements in the section to search.
            </param>
            <param name="equalityComparer">
            The equality comparer to use in the search.
            If <c>null</c>, <see cref="P:System.Collections.Generic.EqualityComparer`1.Default"/> is used.
            </param>
            <returns>
            The zero-based index of the first occurrence of item within the range of
            elements in the <see cref="!:ImmutableList&lt;T&gt;"/> that starts at index and
            contains count number of elements, if found; otherwise, -1.
            </returns>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.IImmutableList`1.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Searches for the specified object and returns the zero-based index of the
            last occurrence within the range of elements in the <see cref="!:ImmutableList&lt;T&gt;"/>
            that contains the specified number of elements and ends at the specified
            index.
            </summary>
            <param name="item">
            The object to locate in the <see cref="!:ImmutableList&lt;T&gt;"/>. The value
            can be null for reference types.
            </param>
            <param name="index">The starting position of the search. The search proceeds from <paramref name="index"/> toward the beginning of this instance.</param>
            <param name="count">The number of elements in the section to search.</param>
            <param name="equalityComparer">
            The equality comparer to use in the search.
            If <c>null</c>, <see cref="P:System.Collections.Generic.EqualityComparer`1.Default"/> is used.
            </param>
            <returns>
            The zero-based index of the last occurrence of <paramref name="item"/> within the range of elements
            in the <see cref="!:ImmutableList&lt;T&gt;"/> that contains <paramref name="count"/> number of elements
            and ends at <paramref name="index"/>, if found; otherwise, -1.
            </returns>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.IImmutableList`1.Add(`0)">
            <summary>
            Adds the specified value to this list.
            </summary>
            <param name="value">The value to add.</param>
            <returns>A new list with the element added.</returns>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.IImmutableList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds the specified values to this list.
            </summary>
            <param name="items">The values to add.</param>
            <returns>A new list with the elements added.</returns>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.IImmutableList`1.Insert(System.Int32,`0)">
            <summary>
            Inserts the specified value at the specified index.
            </summary>
            <param name="index">The index at which to insert the value.</param>
            <param name="element">The element to insert.</param>
            <returns>The new immutable list.</returns>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.IImmutableList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Inserts the specified values at the specified index.
            </summary>
            <param name="index">The index at which to insert the value.</param>
            <param name="items">The elements to insert.</param>
            <returns>The new immutable list.</returns>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.IImmutableList`1.Remove(`0,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Removes the specified value from this list.
            </summary>
            <param name="value">The value to remove.</param>
            <param name="equalityComparer">
            The equality comparer to use in the search.
            If <c>null</c>, <see cref="P:System.Collections.Generic.EqualityComparer`1.Default"/> is used.
            </param>
            <returns>A new list with the element removed, or this list if the element is not in this list.</returns>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.IImmutableList`1.RemoveAll(System.Predicate{`0})">
            <summary>
            Removes all the elements that match the conditions defined by the specified
            predicate.
            </summary>
            <param name="match">
            The <see cref="T:System.Predicate`1"/> delegate that defines the conditions of the elements
            to remove.
            </param>
            <returns>
            The new list.
            </returns>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.IImmutableList`1.RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Removes the specified values from this list.
            </summary>
            <param name="items">The items to remove if matches are found in this list.</param>
            <param name="equalityComparer">
            The equality comparer to use in the search.
            If <c>null</c>, <see cref="P:System.Collections.Generic.EqualityComparer`1.Default"/> is used.
            </param>
            <returns>
            A new list with the elements removed.
            </returns>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.IImmutableList`1.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes the specified values from this list.
            </summary>
            <param name="index">The starting index to begin removal.</param>
            <param name="count">The number of elements to remove.</param>
            <returns>
            A new list with the elements removed.
            </returns>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.IImmutableList`1.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>A new list with the elements removed.</returns>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.IImmutableList`1.SetItem(System.Int32,`0)">
            <summary>
            Replaces an element in the list at a given position with the specified element.
            </summary>
            <param name="index">The position in the list of the element to replace.</param>
            <param name="value">The element to replace the old element with.</param>
            <returns>The new list -- even if the value being replaced is equal to the new value for that position.</returns>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.IImmutableList`1.Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Replaces the first equal element in the list with the specified element.
            </summary>
            <param name="oldValue">The element to replace.</param>
            <param name="newValue">The element to replace the old element with.</param>
            <param name="equalityComparer">
            The equality comparer to use in the search.
            If <c>null</c>, <see cref="P:System.Collections.Generic.EqualityComparer`1.Default"/> is used.
            </param>
            <returns>The new list -- even if the value being replaced is equal to the new value for that position.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the old value does not exist in the list.</exception>
        </member>
        <member name="T:TeleCore.Primitive.Immutable.ImmutableArray`1.Builder">
            <summary>
            A writable array accessor that can be converted into an <see cref="T:TeleCore.Primitive.Immutable.ImmutableArray`1"/>
            instance without allocating memory.
            </summary>
        </member>
        <member name="F:TeleCore.Primitive.Immutable.ImmutableArray`1.Builder._elements">
            <summary>
            The backing array for the builder.
            </summary>
        </member>
        <member name="F:TeleCore.Primitive.Immutable.ImmutableArray`1.Builder._count">
            <summary>
            The number of initialized elements in the array.
            </summary>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.Builder.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:TeleCore.Primitive.Immutable.ImmutableArray`1.Builder"/> class.
            </summary>
            <param name="capacity">The initial capacity of the internal array.</param>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.Builder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TeleCore.Primitive.Immutable.ImmutableArray`1.Builder"/> class.
            </summary>
        </member>
        <member name="P:TeleCore.Primitive.Immutable.ImmutableArray`1.Builder.Capacity">
            <summary>
            Get and sets the length of the internal array.  When set the internal array is
            reallocated to the given capacity if it is not already the specified length.
            </summary>
        </member>
        <member name="P:TeleCore.Primitive.Immutable.ImmutableArray`1.Builder.Count">
            <summary>
            Gets or sets the length of the builder.
            </summary>
            <remarks>
            If the value is decreased, the array contents are truncated.
            If the value is increased, the added elements are initialized to the default value of type <typeparamref name="T"/>.
            </remarks>
        </member>
        <member name="P:TeleCore.Primitive.Immutable.ImmutableArray`1.Builder.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns></returns>
            <exception cref="T:System.IndexOutOfRangeException">
            </exception>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.Builder.ItemRef(System.Int32)">
            <summary>
            Gets a read-only reference to the element at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns></returns>
            <exception cref="T:System.IndexOutOfRangeException">
            </exception>
        </member>
        <member name="P:TeleCore.Primitive.Immutable.ImmutableArray`1.Builder.System#Collections#Generic#ICollection{T}#IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, false.
              </returns>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.Builder.ToImmutable">
            <summary>
            Returns an immutable copy of the current contents of this collection.
            </summary>
            <returns>An immutable array.</returns>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.Builder.MoveToImmutable">
            <summary>
            Extracts the internal array as an <see cref="T:TeleCore.Primitive.Immutable.ImmutableArray`1"/> and replaces it
            with a zero length array.
            </summary>
            <exception cref="T:System.InvalidOperationException">When <see cref="P:TeleCore.Primitive.Immutable.ImmutableArray`1.Builder.Count"/> doesn't
            equal <see cref="P:TeleCore.Primitive.Immutable.ImmutableArray`1.Builder.Capacity"/>.</exception>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.Builder.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.Builder.Insert(System.Int32,`0)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.Generic.IList`1"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
            <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.Builder.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Inserts the specified values at the specified index.
            </summary>
            <param name="index">The index at which to insert the value.</param>
            <param name="items">The elements to insert.</param>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.Builder.InsertRange(System.Int32,TeleCore.Primitive.Immutable.ImmutableArray{`0})">
            <summary>
            Inserts the specified values at the specified index.
            </summary>
            <param name="index">The index at which to insert the value.</param>
            <param name="items">The elements to insert.</param>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.Builder.Add(`0)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.Builder.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds the specified items to the end of the array.
            </summary>
            <param name="items">The items.</param>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.Builder.AddRange(`0[])">
            <summary>
            Adds the specified items to the end of the array.
            </summary>
            <param name="items">The items.</param>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.Builder.AddRange``1(``0[])">
            <summary>
            Adds the specified items to the end of the array.
            </summary>
            <param name="items">The items.</param>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.Builder.AddRange(`0[],System.Int32)">
            <summary>
            Adds the specified items to the end of the array.
            </summary>
            <param name="items">The items.</param>
            <param name="length">The number of elements from the source array to add.</param>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.Builder.AddRange(TeleCore.Primitive.Immutable.ImmutableArray{`0})">
            <summary>
            Adds the specified items to the end of the array.
            </summary>
            <param name="items">The items.</param>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.Builder.AddRange(TeleCore.Primitive.Immutable.ImmutableArray{`0},System.Int32)">
            <summary>
            Adds the specified items to the end of the array.
            </summary>
            <param name="items">The items.</param>
            <param name="length">The number of elements from the source array to add.</param>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.Builder.AddRange(System.ReadOnlySpan{`0})">
            <summary>
            Adds the specified items to the end of the array.
            </summary>
            <param name="items">The items to add at the end of the array.</param>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.Builder.AddRange``1(System.ReadOnlySpan{``0})">
            <summary>
            Adds the specified items to the end of the array.
            </summary>
            <param name="items">The items to add at the end of the array.</param>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.Builder.AddRange``1(TeleCore.Primitive.Immutable.ImmutableArray{``0})">
            <summary>
            Adds the specified items to the end of the array.
            </summary>
            <param name="items">The items to add at the end of the array.</param>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.Builder.AddRange(TeleCore.Primitive.Immutable.ImmutableArray{`0}.Builder)">
            <summary>
            Adds the specified items to the end of the array.
            </summary>
            <param name="items">The items to add at the end of the array.</param>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.Builder.AddRange``1(TeleCore.Primitive.Immutable.ImmutableArray{``0}.Builder)">
            <summary>
            Adds the specified items to the end of the array.
            </summary>
            <param name="items">The items to add at the end of the array.</param>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.Builder.Remove(`0)">
            <summary>
            Removes the first occurrence of the specified element from the builder.
            If no match is found, the builder remains unchanged.
            </summary>
            <param name="element">The element.</param>
            <returns>A value indicating whether the specified element was found and removed from the collection.</returns>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.Builder.Remove(`0,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Removes the first occurrence of the specified element from the builder.
            If no match is found, the builder remains unchanged.
            </summary>
            <param name="element">The element to remove.</param>
            <param name="equalityComparer">
            The equality comparer to use in the search.
            If <c>null</c>, <see cref="P:System.Collections.Generic.EqualityComparer`1.Default"/> is used.
            </param>
            <returns>A value indicating whether the specified element was found and removed from the collection.</returns>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.Builder.RemoveAll(System.Predicate{`0})">
            <summary>
            Removes all the elements that match the conditions defined by the specified
            predicate.
            </summary>
            <param name="match">
            The <see cref="T:System.Predicate`1"/> delegate that defines the conditions of the elements
            to remove.
            </param>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.Builder.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.Generic.IList`1"/> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.Builder.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes the specified values from this list.
            </summary>
            <param name="index">The 0-based index into the array for the element to omit from the returned array.</param>
            <param name="length">The number of elements to remove.</param>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.Builder.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Removes the specified values from this list.
            </summary>
            <param name="items">The items to remove if matches are found in this list.</param>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.Builder.RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Removes the specified values from this list.
            </summary>
            <param name="items">The items to remove if matches are found in this list.</param>
            <param name="equalityComparer">
            The equality comparer to use in the search.
            If <c>null</c>, <see cref="P:System.Collections.Generic.EqualityComparer`1.Default"/> is used.
            </param>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.Builder.Replace(`0,`0)">
            <summary>
            Replaces the first equal element in the list with the specified element.
            </summary>
            <param name="oldValue">The element to replace.</param>
            <param name="newValue">The element to replace the old element with.</param>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.Builder.Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Replaces the first equal element in the list with the specified element.
            </summary>
            <param name="oldValue">The element to replace.</param>
            <param name="newValue">The element to replace the old element with.</param>
            <param name="equalityComparer">
            The equality comparer to use in the search.
            If <c>null</c>, <see cref="P:System.Collections.Generic.EqualityComparer`1.Default"/> is used.
            </param>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.Builder.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.Builder.ToArray">
            <summary>
            Creates a new array with the current contents of this Builder.
            </summary>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.Builder.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the current contents to the specified array.
            </summary>
            <param name="array">The array to copy to.</param>
            <param name="index">The starting index of the target array.</param>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.Builder.CopyTo(`0[])">
            <summary>
            Copies the contents of this array to the specified array.
            </summary>
            <param name="destination">The array to copy to.</param>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.Builder.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
            <summary>
            Copies the contents of this array to the specified array.
            </summary>
            <param name="sourceIndex">The index into this collection of the first element to copy.</param>
            <param name="destination">The array to copy to.</param>
            <param name="destinationIndex">The index into the destination array to which the first copied element is written.</param>
            <param name="length">The number of elements to copy.</param>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.Builder.EnsureCapacity(System.Int32)">
            <summary>
            Resizes the array to accommodate the specified capacity requirement.
            </summary>
            <param name="capacity">The required capacity.</param>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.Builder.IndexOf(`0)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <returns>
            The index of <paramref name="item"/> if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.Builder.IndexOf(`0,System.Int32)">
            <summary>
            Searches the array for the specified item.
            </summary>
            <param name="item">The item to search for.</param>
            <param name="startIndex">The index at which to begin the search.</param>
            <returns>The 0-based index into the array where the item was found; or -1 if it could not be found.</returns>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.Builder.IndexOf(`0,System.Int32,System.Int32)">
            <summary>
            Searches the array for the specified item.
            </summary>
            <param name="item">The item to search for.</param>
            <param name="startIndex">The index at which to begin the search.</param>
            <param name="count">The number of elements to search.</param>
            <returns>The 0-based index into the array where the item was found; or -1 if it could not be found.</returns>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.Builder.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Searches the array for the specified item.
            </summary>
            <param name="item">The item to search for.</param>
            <param name="startIndex">The index at which to begin the search.</param>
            <param name="count">The number of elements to search.</param>
            <param name="equalityComparer">
            The equality comparer to use in the search.
            If <c>null</c>, <see cref="P:System.Collections.Generic.EqualityComparer`1.Default"/> is used.
            </param>
            <returns>The 0-based index into the array where the item was found; or -1 if it could not be found.</returns>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.Builder.IndexOf(`0,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Searches the array for the specified item.
            </summary>
            <param name="item">The item to search for.</param>
            <param name="startIndex">The index at which to begin the search.</param>
            <param name="equalityComparer">
            The equality comparer to use in the search.
            If <c>null</c>, <see cref="P:System.Collections.Generic.EqualityComparer`1.Default"/> is used.
            </param>
            <returns>The 0-based index into the array where the item was found; or -1 if it could not be found.</returns>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.Builder.LastIndexOf(`0)">
            <summary>
            Searches the array for the specified item in reverse.
            </summary>
            <param name="item">The item to search for.</param>
            <returns>The 0-based index into the array where the item was found; or -1 if it could not be found.</returns>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.Builder.LastIndexOf(`0,System.Int32)">
            <summary>
            Searches the array for the specified item in reverse.
            </summary>
            <param name="item">The item to search for.</param>
            <param name="startIndex">The index at which to begin the search.</param>
            <returns>The 0-based index into the array where the item was found; or -1 if it could not be found.</returns>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.Builder.LastIndexOf(`0,System.Int32,System.Int32)">
            <summary>
            Searches the array for the specified item in reverse.
            </summary>
            <param name="item">The item to search for.</param>
            <param name="startIndex">The index at which to begin the search.</param>
            <param name="count">The number of elements to search.</param>
            <returns>The 0-based index into the array where the item was found; or -1 if it could not be found.</returns>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.Builder.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Searches the array for the specified item in reverse.
            </summary>
            <param name="item">The item to search for.</param>
            <param name="startIndex">The index at which to begin the search.</param>
            <param name="count">The number of elements to search.</param>
            <param name="equalityComparer">The equality comparer to use in the search.</param>
            <returns>The 0-based index into the array where the item was found; or -1 if it could not be found.</returns>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.Builder.Reverse">
            <summary>
            Reverses the order of elements in the collection.
            </summary>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.Builder.Sort">
            <summary>
            Sorts the array.
            </summary>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.Builder.Sort(System.Comparison{`0})">
            <summary>
            Sorts the elements in the entire array using
            the specified <see cref="T:System.Comparison`1"/>.
            </summary>
            <param name="comparison">
            The <see cref="T:System.Comparison`1"/> to use when comparing elements.
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="comparison"/> is null.</exception>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.Builder.Sort(System.Collections.Generic.IComparer{`0})">
            <summary>
            Sorts the array.
            </summary>
            <param name="comparer">The comparer to use in sorting. If <c>null</c>, the default comparer is used.</param>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.Builder.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
            <summary>
            Sorts the array.
            </summary>
            <param name="index">The index of the first element to consider in the sort.</param>
            <param name="count">The number of elements to include in the sort.</param>
            <param name="comparer">The comparer to use in sorting. If <c>null</c>, the default comparer is used.</param>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.Builder.CopyTo(System.Span{`0})">
            <summary>
            Copies the current contents to the specified <see cref="T:System.Span`1"/>.
            </summary>
            <param name="destination">The <see cref="T:System.Span`1"/> to copy to.</param>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.Builder.GetEnumerator">
            <summary>
            Returns an enumerator for the contents of the array.
            </summary>
            <returns>An enumerator.</returns>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.Builder.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>
            Returns an enumerator for the contents of the array.
            </summary>
            <returns>An enumerator.</returns>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.Builder.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator for the contents of the array.
            </summary>
            <returns>An enumerator.</returns>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.Builder.AddRange``1(``0[],System.Int32)">
            <summary>
            Adds items to this collection.
            </summary>
            <typeparam name="TDerived">The type of source elements.</typeparam>
            <param name="items">The source array.</param>
            <param name="length">The number of elements to add to this array.</param>
        </member>
        <member name="P:TeleCore.Primitive.Immutable.ImmutableArray`1.System#Collections#Generic#IList{T}#Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index in the read-only list.
            </summary>
            <param name="index">The zero-based index of the element to get.</param>
            <returns>The element at the specified index in the read-only list.</returns>
            <exception cref="T:System.NotSupportedException">Always thrown from the setter.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if the <see cref="P:TeleCore.Primitive.Immutable.ImmutableArray`1.IsDefault"/> property returns true.</exception>
        </member>
        <member name="P:TeleCore.Primitive.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
            <summary>
            Gets a value indicating whether this instance is read only.
            </summary>
            <value>
            <c>true</c> if this instance is read only; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:TeleCore.Primitive.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#Count">
            <summary>
            Gets the number of array in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if the <see cref="P:TeleCore.Primitive.Immutable.ImmutableArray`1.IsDefault"/> property returns true.</exception>
        </member>
        <member name="P:TeleCore.Primitive.Immutable.ImmutableArray`1.System#Collections#Generic#IReadOnlyCollection{T}#Count">
            <summary>
            Gets the number of array in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if the <see cref="P:TeleCore.Primitive.Immutable.ImmutableArray`1.IsDefault"/> property returns true.</exception>
        </member>
        <member name="P:TeleCore.Primitive.Immutable.ImmutableArray`1.System#Collections#Generic#IReadOnlyList{T}#Item(System.Int32)">
            <summary>
            Gets the element at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>
            The element.
            </returns>
            <exception cref="T:System.InvalidOperationException">Thrown if the <see cref="P:TeleCore.Primitive.Immutable.ImmutableArray`1.IsDefault"/> property returns true.</exception>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.IndexOf(`0)">
            <summary>
            Searches the array for the specified item.
            </summary>
            <param name="item">The item to search for.</param>
            <returns>The 0-based index into the array where the item was found; or -1 if it could not be found.</returns>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Searches the array for the specified item.
            </summary>
            <param name="item">The item to search for.</param>
            <param name="startIndex">The index at which to begin the search.</param>
            <param name="equalityComparer">The equality comparer to use in the search.</param>
            <returns>The 0-based index into the array where the item was found; or -1 if it could not be found.</returns>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32)">
            <summary>
            Searches the array for the specified item.
            </summary>
            <param name="item">The item to search for.</param>
            <param name="startIndex">The index at which to begin the search.</param>
            <returns>The 0-based index into the array where the item was found; or -1 if it could not be found.</returns>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32,System.Int32)">
            <summary>
            Searches the array for the specified item.
            </summary>
            <param name="item">The item to search for.</param>
            <param name="startIndex">The index at which to begin the search.</param>
            <param name="count">The number of elements to search.</param>
            <returns>The 0-based index into the array where the item was found; or -1 if it could not be found.</returns>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Searches the array for the specified item.
            </summary>
            <param name="item">The item to search for.</param>
            <param name="startIndex">The index at which to begin the search.</param>
            <param name="count">The number of elements to search.</param>
            <param name="equalityComparer">
            The equality comparer to use in the search.
            If <c>null</c>, <see cref="P:System.Collections.Generic.EqualityComparer`1.Default"/> is used.
            </param>
            <returns>The 0-based index into the array where the item was found; or -1 if it could not be found.</returns>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.LastIndexOf(`0)">
            <summary>
            Searches the array for the specified item in reverse.
            </summary>
            <param name="item">The item to search for.</param>
            <returns>The 0-based index into the array where the item was found; or -1 if it could not be found.</returns>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.LastIndexOf(`0,System.Int32)">
            <summary>
            Searches the array for the specified item in reverse.
            </summary>
            <param name="item">The item to search for.</param>
            <param name="startIndex">The index at which to begin the search.</param>
            <returns>The 0-based index into the array where the item was found; or -1 if it could not be found.</returns>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.LastIndexOf(`0,System.Int32,System.Int32)">
            <summary>
            Searches the array for the specified item in reverse.
            </summary>
            <param name="item">The item to search for.</param>
            <param name="startIndex">The index at which to begin the search.</param>
            <param name="count">The number of elements to search.</param>
            <returns>The 0-based index into the array where the item was found; or -1 if it could not be found.</returns>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Searches the array for the specified item in reverse.
            </summary>
            <param name="item">The item to search for.</param>
            <param name="startIndex">The index at which to begin the search.</param>
            <param name="count">The number of elements to search.</param>
            <param name="equalityComparer">The equality comparer to use in the search.</param>
            <returns>The 0-based index into the array where the item was found; or -1 if it could not be found.</returns>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.Contains(`0)">
            <summary>
            Determines whether the specified item exists in the array.
            </summary>
            <param name="item">The item to search for.</param>
            <returns><c>true</c> if an equal value was found in the array; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.Insert(System.Int32,`0)">
            <summary>
            Returns a new array with the specified value inserted at the specified position.
            </summary>
            <param name="index">The 0-based index into the array at which the new item should be added.</param>
            <param name="item">The item to insert at the start of the array.</param>
            <returns>A new array.</returns>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Inserts the specified values at the specified index.
            </summary>
            <param name="index">The index at which to insert the value.</param>
            <param name="items">The elements to insert.</param>
            <returns>The new immutable collection.</returns>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.InsertRange(System.Int32,TeleCore.Primitive.Immutable.ImmutableArray{`0})">
            <summary>
            Inserts the specified values at the specified index.
            </summary>
            <param name="index">The index at which to insert the value.</param>
            <param name="items">The elements to insert.</param>
            <returns>The new immutable collection.</returns>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.Add(`0)">
            <summary>
            Returns a new array with the specified value inserted at the end.
            </summary>
            <param name="item">The item to insert at the end of the array.</param>
            <returns>A new array.</returns>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds the specified values to this list.
            </summary>
            <param name="items">The values to add.</param>
            <returns>A new list with the elements added.</returns>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.AddRange(`0[],System.Int32)">
            <summary>
            Adds the specified items to the end of the array.
            </summary>
            <param name="items">The values to add.</param>
            <param name="length">The number of elements from the source array to add.</param>
            <returns>A new list with the elements added.</returns>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.AddRange``1(``0[])">
            <summary>
            Adds the specified items to the end of the array.
            </summary>
            <param name="items">The values to add.</param>
            <returns>A new list with the elements added.</returns>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.AddRange(TeleCore.Primitive.Immutable.ImmutableArray{`0},System.Int32)">
            <summary>
            Adds the specified items to the end of the array.
            </summary>
            <param name="items">The values to add.</param>
            <param name="length">The number of elements from the source array to add.</param>
            <returns>A new list with the elements added.</returns>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.AddRange``1(TeleCore.Primitive.Immutable.ImmutableArray{``0})">
            <summary>
            Adds the specified items to the end of the array.
            </summary>
            <param name="items">The values to add.</param>
            <returns>A new list with the elements added.</returns>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.AddRange(TeleCore.Primitive.Immutable.ImmutableArray{`0})">
            <summary>
            Adds the specified values to this list.
            </summary>
            <param name="items">The values to add.</param>
            <returns>A new list with the elements added.</returns>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.SetItem(System.Int32,`0)">
            <summary>
            Returns an array with the item at the specified position replaced.
            </summary>
            <param name="index">The index of the item to replace.</param>
            <param name="item">The new item.</param>
            <returns>The new array.</returns>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.Replace(`0,`0)">
            <summary>
            Replaces the first equal element in the list with the specified element.
            </summary>
            <param name="oldValue">The element to replace.</param>
            <param name="newValue">The element to replace the old element with.</param>
            <returns>The new list -- even if the value being replaced is equal to the new value for that position.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the old value does not exist in the list.</exception>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Replaces the first equal element in the list with the specified element.
            </summary>
            <param name="oldValue">The element to replace.</param>
            <param name="newValue">The element to replace the old element with.</param>
            <param name="equalityComparer">
            The equality comparer to use in the search.
            If <c>null</c>, <see cref="P:System.Collections.Generic.EqualityComparer`1.Default"/> is used.
            </param>
            <returns>The new list -- even if the value being replaced is equal to the new value for that position.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the old value does not exist in the list.</exception>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.Remove(`0)">
            <summary>
            Returns an array with the first occurrence of the specified element removed from the array.
            If no match is found, the current array is returned.
            </summary>
            <param name="item">The item to remove.</param>
            <returns>The new array.</returns>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.Remove(`0,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Returns an array with the first occurrence of the specified element removed from the array.
            If no match is found, the current array is returned.
            </summary>
            <param name="item">The item to remove.</param>
            <param name="equalityComparer">
            The equality comparer to use in the search.
            If <c>null</c>, <see cref="P:System.Collections.Generic.EqualityComparer`1.Default"/> is used.
            </param>
            <returns>The new array.</returns>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.RemoveAt(System.Int32)">
            <summary>
            Returns an array with the element at the specified position removed.
            </summary>
            <param name="index">The 0-based index into the array for the element to omit from the returned array.</param>
            <returns>The new array.</returns>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Returns an array with the elements at the specified position removed.
            </summary>
            <param name="index">The 0-based index into the array for the element to omit from the returned array.</param>
            <param name="length">The number of elements to remove.</param>
            <returns>The new array.</returns>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Removes the specified values from this list.
            </summary>
            <param name="items">The items to remove if matches are found in this list.</param>
            <returns>
            A new list with the elements removed.
            </returns>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Removes the specified values from this list.
            </summary>
            <param name="items">The items to remove if matches are found in this list.</param>
            <param name="equalityComparer">
            The equality comparer to use in the search.
            If <c>null</c>, <see cref="P:System.Collections.Generic.EqualityComparer`1.Default"/> is used.
            </param>
            <returns>
            A new list with the elements removed.
            </returns>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.RemoveRange(TeleCore.Primitive.Immutable.ImmutableArray{`0})">
            <summary>
            Removes the specified values from this list.
            </summary>
            <param name="items">The items to remove if matches are found in this list.</param>
            <returns>
            A new list with the elements removed.
            </returns>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.RemoveRange(TeleCore.Primitive.Immutable.ImmutableArray{`0},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Removes the specified values from this list.
            </summary>
            <param name="items">The items to remove if matches are found in this list.</param>
            <param name="equalityComparer">
            The equality comparer to use in the search.
            </param>
            <returns>
            A new list with the elements removed.
            </returns>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.RemoveAll(System.Predicate{`0})">
            <summary>
            Removes all the elements that match the conditions defined by the specified
            predicate.
            </summary>
            <param name="match">
            The <see cref="T:System.Predicate`1"/> delegate that defines the conditions of the elements
            to remove.
            </param>
            <returns>
            The new list.
            </returns>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.Clear">
            <summary>
            Returns an empty array.
            </summary>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.Sort">
            <summary>
            Returns a sorted instance of this array.
            </summary>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.Sort(System.Comparison{`0})">
            <summary>
            Sorts the elements in the entire <see cref="T:TeleCore.Primitive.Immutable.ImmutableArray`1"/> using
            the specified <see cref="T:System.Comparison`1"/>.
            </summary>
            <param name="comparison">
            The <see cref="T:System.Comparison`1"/> to use when comparing elements.
            </param>
            <returns>The sorted list.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="comparison"/> is null.</exception>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.Sort(System.Collections.Generic.IComparer{`0})">
            <summary>
            Returns a sorted instance of this array.
            </summary>
            <param name="comparer">The comparer to use in sorting. If <c>null</c>, the default comparer is used.</param>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
            <summary>
            Returns a sorted instance of this array.
            </summary>
            <param name="index">The index of the first element to consider in the sort.</param>
            <param name="count">The number of elements to include in the sort.</param>
            <param name="comparer">The comparer to use in sorting. If <c>null</c>, the default comparer is used.</param>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.OfType``1">
            <summary>
            Filters the elements of this array to those assignable to the specified type.
            </summary>
            <typeparam name="TResult">The type to filter the elements of the sequence on.</typeparam>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains elements from
            the input sequence of type <typeparamref name="TResult"/>.
            </returns>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.AddRange(System.ReadOnlySpan{`0})">
            <summary>
            Adds the specified values to this list.
            </summary>
            <param name="items">The values to add.</param>
            <returns>A new list with the elements added.</returns>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.AddRange(`0[])">
            <summary>
            Adds the specified values to this list.
            </summary>
            <param name="items">The values to add.</param>
            <returns>A new list with the elements added.</returns>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.AsSpan(System.Int32,System.Int32)">
            <summary>
            Creates a <see cref="T:System.ReadOnlySpan`1"/> over the portion of current <see cref="T:TeleCore.Primitive.Immutable.ImmutableArray`1"/> beginning at a specified position for a specified length.
            </summary>
            <param name="start">The index at which to begin the span.</param>
            <param name="length">The number of items in the span.</param>
            <returns>The <see cref="T:System.ReadOnlySpan`1"/> representation of the <see cref="T:TeleCore.Primitive.Immutable.ImmutableArray`1"/></returns>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.CopyTo(System.Span{`0})">
            <summary>
            Copies the elements of current <see cref="T:TeleCore.Primitive.Immutable.ImmutableArray`1"/> to an <see cref="T:System.Span`1"/>.
            </summary>
            <param name="destination">The <see cref="T:System.Span`1"/> that is the destination of the elements copied from current <see cref="T:TeleCore.Primitive.Immutable.ImmutableArray`1"/>.</param>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.InsertRange(System.Int32,`0[])">
            <summary>
            Inserts the specified values at the specified index.
            </summary>
            <param name="index">The index at which to insert the value.</param>
            <param name="items">The elements to insert.</param>
            <returns>The new immutable collection.</returns>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.InsertRange(System.Int32,System.ReadOnlySpan{`0})">
            <summary>
            Inserts the specified values at the specified index.
            </summary>
            <param name="index">The index at which to insert the value.</param>
            <param name="items">The elements to insert.</param>
            <returns>The new immutable collection.</returns>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.RemoveRange(System.ReadOnlySpan{`0},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Removes the specified values from this list.
            </summary>
            <param name="items">The items to remove if matches are found in this list.</param>
            <param name="equalityComparer">
            The equality comparer to use in the search.
            </param>
            <returns>
            A new list with the elements removed.
            </returns>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.RemoveRange(`0[],System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Removes the specified values from this list.
            </summary>
            <param name="items">The items to remove if matches are found in this list.</param>
            <param name="equalityComparer">
            The equality comparer to use in the search.
            </param>
            <returns>
            A new list with the elements removed.
            </returns>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.Slice(System.Int32,System.Int32)">
            <summary>
            Forms a slice out of the current <see cref="T:TeleCore.Primitive.Immutable.ImmutableArray`1"/> starting at a specified index for a specified length.
            </summary>
            <param name="start">The index at which to begin this slice.</param>
            <param name="length">The desired length for the slice.</param>
            <returns>A <see cref="T:TeleCore.Primitive.Immutable.ImmutableArray`1"/> that consists of length elements from the current <see cref="T:TeleCore.Primitive.Immutable.ImmutableArray`1"/> starting at start.</returns>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.TeleCore#Primitive#Immutable#IImmutableList{T}#Clear">
            <summary>
            See <see cref="T:TeleCore.Primitive.Immutable.IImmutableList`1"/>
            </summary>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.TeleCore#Primitive#Immutable#IImmutableList{T}#Add(`0)">
            <summary>
            See <see cref="T:TeleCore.Primitive.Immutable.IImmutableList`1"/>
            </summary>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.TeleCore#Primitive#Immutable#IImmutableList{T}#AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            See <see cref="T:TeleCore.Primitive.Immutable.IImmutableList`1"/>
            </summary>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.TeleCore#Primitive#Immutable#IImmutableList{T}#Insert(System.Int32,`0)">
            <summary>
            See <see cref="T:TeleCore.Primitive.Immutable.IImmutableList`1"/>
            </summary>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.TeleCore#Primitive#Immutable#IImmutableList{T}#InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            See <see cref="T:TeleCore.Primitive.Immutable.IImmutableList`1"/>
            </summary>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.TeleCore#Primitive#Immutable#IImmutableList{T}#Remove(`0,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            See <see cref="T:TeleCore.Primitive.Immutable.IImmutableList`1"/>
            </summary>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.TeleCore#Primitive#Immutable#IImmutableList{T}#RemoveAll(System.Predicate{`0})">
            <summary>
            See <see cref="T:TeleCore.Primitive.Immutable.IImmutableList`1"/>
            </summary>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.TeleCore#Primitive#Immutable#IImmutableList{T}#RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            See <see cref="T:TeleCore.Primitive.Immutable.IImmutableList`1"/>
            </summary>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.TeleCore#Primitive#Immutable#IImmutableList{T}#RemoveRange(System.Int32,System.Int32)">
            <summary>
            See <see cref="T:TeleCore.Primitive.Immutable.IImmutableList`1"/>
            </summary>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.TeleCore#Primitive#Immutable#IImmutableList{T}#RemoveAt(System.Int32)">
            <summary>
            See <see cref="T:TeleCore.Primitive.Immutable.IImmutableList`1"/>
            </summary>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.TeleCore#Primitive#Immutable#IImmutableList{T}#SetItem(System.Int32,`0)">
            <summary>
            See <see cref="T:TeleCore.Primitive.Immutable.IImmutableList`1"/>
            </summary>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.TeleCore#Primitive#Immutable#IImmutableList{T}#Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            See <see cref="T:TeleCore.Primitive.Immutable.IImmutableList`1"/>
            </summary>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.System#Collections#IList#Add(System.Object)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.IList"/>.
            </summary>
            <param name="value">The object to add to the <see cref="T:System.Collections.IList"/>.</param>
            <returns>
            The position into which the new element was inserted, or -1 to indicate that the item was not inserted into the collection,
            </returns>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.System#Collections#IList#Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.System#Collections#IList#Contains(System.Object)">
            <summary>
            Determines whether the <see cref="T:System.Collections.IList"/> contains a specific value.
            </summary>
            <param name="value">The object to locate in the <see cref="T:System.Collections.IList"/>.</param>
            <returns>
            true if the <see cref="T:System.Object"/> is found in the <see cref="T:System.Collections.IList"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.System#Collections#IList#IndexOf(System.Object)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.IList"/>.
            </summary>
            <param name="value">The object to locate in the <see cref="T:System.Collections.IList"/>.</param>
            <returns>
            The index of <paramref name="value"/> if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.System#Collections#IList#Insert(System.Int32,System.Object)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.IList"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="value"/> should be inserted.</param>
            <param name="value">The object to insert into the <see cref="T:System.Collections.IList"/>.</param>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="P:TeleCore.Primitive.Immutable.ImmutableArray`1.System#Collections#IList#IsFixedSize">
            <summary>
            Gets a value indicating whether this instance is fixed size.
            </summary>
            <value>
            <c>true</c> if this instance is fixed size; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:TeleCore.Primitive.Immutable.ImmutableArray`1.System#Collections#IList#IsReadOnly">
            <summary>
            Gets a value indicating whether this instance is read only.
            </summary>
            <value>
            <c>true</c> if this instance is read only; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:TeleCore.Primitive.Immutable.ImmutableArray`1.System#Collections#ICollection#Count">
            <summary>
            Gets the size of the array.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if the <see cref="P:TeleCore.Primitive.Immutable.ImmutableArray`1.IsDefault"/> property returns true.</exception>
        </member>
        <member name="P:TeleCore.Primitive.Immutable.ImmutableArray`1.System#Collections#ICollection#IsSynchronized">
            <summary>
            See the <see cref="T:System.Collections.ICollection"/> interface.
            </summary>
        </member>
        <member name="P:TeleCore.Primitive.Immutable.ImmutableArray`1.System#Collections#ICollection#SyncRoot">
            <summary>
            Gets the sync root.
            </summary>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.System#Collections#IList#Remove(System.Object)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.IList"/>.
            </summary>
            <param name="value">The object to remove from the <see cref="T:System.Collections.IList"/>.</param>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.System#Collections#IList#RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.Generic.IList`1"/> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="P:TeleCore.Primitive.Immutable.ImmutableArray`1.System#Collections#IList#Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:System.Object"/> at the specified index.
            </summary>
            <value>
            The <see cref="T:System.Object"/>.
            </value>
            <param name="index">The index.</param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Always thrown from the setter.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if the <see cref="P:TeleCore.Primitive.Immutable.ImmutableArray`1.IsDefault"/> property returns true.</exception>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="index">The zero-based index in <paramref name="array"/> at which copying begins.</param>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
            <summary>
            Determines whether an object is structurally equal to the current instance.
            </summary>
            <param name="other">The object to compare with the current instance.</param>
            <param name="comparer">An object that determines whether the current instance and other are equal.</param>
            <returns>true if the two objects are equal; otherwise, false.</returns>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
            <summary>
            Returns a hash code for the current instance.
            </summary>
            <param name="comparer">An object that computes the hash code of the current object.</param>
            <returns>The hash code for the current instance.</returns>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
            <summary>
            Determines whether the current collection object precedes, occurs in the
            same position as, or follows another object in the sort order.
            </summary>
            <param name="other">The object to compare with the current instance.</param>
            <param name="comparer">
            An object that compares members of the current collection object with the
            corresponding members of other.
            </param>
            <returns>
            An integer that indicates the relationship of the current collection object
            to other.
            </returns>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.RemoveAtRange(System.Collections.Generic.ICollection{System.Int32})">
            <summary>
            Returns an array with items at the specified indices removed.
            </summary>
            <param name="indicesToRemove">A **sorted set** of indices to elements that should be omitted from the returned array.</param>
            <returns>The new array.</returns>
        </member>
        <member name="T:TeleCore.Primitive.Immutable.ImmutableArray`1.Enumerator">
            <summary>
            An array enumerator.
            </summary>
            <remarks>
            It is important that this enumerator does NOT implement <see cref="T:System.IDisposable"/>.
            We want the iterator to inline when we do foreach and to not result in
            a try/finally frame in the client.
            </remarks>
        </member>
        <member name="F:TeleCore.Primitive.Immutable.ImmutableArray`1.Enumerator._array">
            <summary>
            The array being enumerated.
            </summary>
        </member>
        <member name="F:TeleCore.Primitive.Immutable.ImmutableArray`1.Enumerator._index">
            <summary>
            The currently enumerated position.
            </summary>
            <value>
            -1 before the first call to <see cref="M:TeleCore.Primitive.Immutable.ImmutableArray`1.Enumerator.MoveNext"/>.
            >= this.array.Length after <see cref="M:TeleCore.Primitive.Immutable.ImmutableArray`1.Enumerator.MoveNext"/> returns false.
            </value>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.Enumerator.#ctor(`0[])">
            <summary>
            Initializes a new instance of the <see cref="T:TeleCore.Primitive.Immutable.ImmutableArray`1.Enumerator"/> struct.
            </summary>
            <param name="array">The array to enumerate.</param>
        </member>
        <member name="P:TeleCore.Primitive.Immutable.ImmutableArray`1.Enumerator.Current">
            <summary>
            Gets the currently enumerated value.
            </summary>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.Enumerator.MoveNext">
            <summary>
            Advances to the next value to be enumerated.
            </summary>
            <returns><c>true</c> if another item exists in the array; <c>false</c> otherwise.</returns>
        </member>
        <member name="T:TeleCore.Primitive.Immutable.ImmutableArray`1.EnumeratorObject">
            <summary>
            An array enumerator that implements <see cref="T:System.Collections.Generic.IEnumerator`1"/> pattern (including <see cref="T:System.IDisposable"/>).
            </summary>
        </member>
        <member name="F:TeleCore.Primitive.Immutable.ImmutableArray`1.EnumeratorObject.s_EmptyEnumerator">
            <summary>
            A shareable singleton for enumerating empty arrays.
            </summary>
        </member>
        <member name="F:TeleCore.Primitive.Immutable.ImmutableArray`1.EnumeratorObject._array">
            <summary>
            The array being enumerated.
            </summary>
        </member>
        <member name="F:TeleCore.Primitive.Immutable.ImmutableArray`1.EnumeratorObject._index">
            <summary>
            The currently enumerated position.
            </summary>
            <value>
            -1 before the first call to <see cref="M:TeleCore.Primitive.Immutable.ImmutableArray`1.EnumeratorObject.MoveNext"/>.
            this.array.Length - 1 after MoveNext returns false.
            </value>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.EnumeratorObject.#ctor(`0[])">
            <summary>
            Initializes a new instance of the <see cref="T:TeleCore.Primitive.Immutable.ImmutableArray`1.Enumerator"/> class.
            </summary>
        </member>
        <member name="P:TeleCore.Primitive.Immutable.ImmutableArray`1.EnumeratorObject.Current">
            <summary>
            Gets the currently enumerated value.
            </summary>
        </member>
        <member name="P:TeleCore.Primitive.Immutable.ImmutableArray`1.EnumeratorObject.System#Collections#IEnumerator#Current">
            <summary>
            Gets the currently enumerated value.
            </summary>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.EnumeratorObject.MoveNext">
            <summary>
            If another item exists in the array, advances to the next value to be enumerated.
            </summary>
            <returns><c>true</c> if another item exists in the array; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.EnumeratorObject.System#Collections#IEnumerator#Reset">
            <summary>
            Resets enumeration to the start of the array.
            </summary>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.EnumeratorObject.Dispose">
            <summary>
            Disposes this enumerator.
            </summary>
            <remarks>
            Currently has no action.
            </remarks>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.EnumeratorObject.Create(`0[])">
            <summary>
            Creates an enumerator for the specified array.
            </summary>
        </member>
        <member name="F:TeleCore.Primitive.Immutable.ImmutableArray`1.array">
            <summary>
            The backing field for this instance. References to this value should never be shared with outside code.
            </summary>
        </member>
        <member name="F:TeleCore.Primitive.Immutable.ImmutableArray`1.Empty">
            <summary>
            An empty (initialized) instance of <see cref="T:TeleCore.Primitive.Immutable.ImmutableArray`1"/>.
            </summary>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.#ctor(`0[])">
            <summary>
            Initializes a new instance of the <see cref="T:TeleCore.Primitive.Immutable.ImmutableArray`1"/> struct
            *without making a defensive copy*.
            </summary>
            <param name="items">The array to use. May be null for "default" arrays.</param>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.op_Equality(TeleCore.Primitive.Immutable.ImmutableArray{`0},TeleCore.Primitive.Immutable.ImmutableArray{`0})">
            <summary>
            Checks equality between two instances.
            </summary>
            <param name="left">The instance to the left of the operator.</param>
            <param name="right">The instance to the right of the operator.</param>
            <returns><c>true</c> if the values' underlying arrays are reference equal; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.op_Inequality(TeleCore.Primitive.Immutable.ImmutableArray{`0},TeleCore.Primitive.Immutable.ImmutableArray{`0})">
            <summary>
            Checks inequality between two instances.
            </summary>
            <param name="left">The instance to the left of the operator.</param>
            <param name="right">The instance to the right of the operator.</param>
            <returns><c>true</c> if the values' underlying arrays are reference not equal; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.op_Equality(System.Nullable{TeleCore.Primitive.Immutable.ImmutableArray{`0}},System.Nullable{TeleCore.Primitive.Immutable.ImmutableArray{`0}})">
            <summary>
            Checks equality between two instances.
            </summary>
            <param name="left">The instance to the left of the operator.</param>
            <param name="right">The instance to the right of the operator.</param>
            <returns><c>true</c> if the values' underlying arrays are reference equal; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.op_Inequality(System.Nullable{TeleCore.Primitive.Immutable.ImmutableArray{`0}},System.Nullable{TeleCore.Primitive.Immutable.ImmutableArray{`0}})">
            <summary>
            Checks inequality between two instances.
            </summary>
            <param name="left">The instance to the left of the operator.</param>
            <param name="right">The instance to the right of the operator.</param>
            <returns><c>true</c> if the values' underlying arrays are reference not equal; <c>false</c> otherwise.</returns>
        </member>
        <member name="P:TeleCore.Primitive.Immutable.ImmutableArray`1.Item(System.Int32)">
            <summary>
            Gets the element at the specified index in the read-only list.
            </summary>
            <param name="index">The zero-based index of the element to get.</param>
            <returns>The element at the specified index in the read-only list.</returns>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.ItemRef(System.Int32)">
            <summary>
            Gets a read-only reference to the element at the specified index in the read-only list.
            </summary>
            <param name="index">The zero-based index of the element to get a reference to.</param>
            <returns>A read-only reference to the element at the specified index in the read-only list.</returns>
            <remarks>
            We intentionally do not check this.array != null, and throw NullReferenceException
            if this is called while uninitialized.
            The reason for this is perf.
            Length and the indexer must be absolutely trivially implemented for the JIT optimization
            of removing array bounds checking to work.
            </remarks>
        </member>
        <member name="P:TeleCore.Primitive.Immutable.ImmutableArray`1.IsEmpty">
            <summary>
            Gets a value indicating whether this collection is empty.
            </summary>
        </member>
        <member name="P:TeleCore.Primitive.Immutable.ImmutableArray`1.Length">
            <summary>
            Gets the number of elements in the array.
            </summary>
            <remarks>
            We intentionally do not check this.array != null, and throw NullReferenceException
            if this is called while uninitialized.
            The reason for this is perf.
            Length and the indexer must be absolutely trivially implemented for the JIT optimization
            of removing array bounds checking to work.
            </remarks>
        </member>
        <member name="P:TeleCore.Primitive.Immutable.ImmutableArray`1.IsDefault">
            <summary>
            Gets a value indicating whether this struct was initialized without an actual array instance.
            </summary>
        </member>
        <member name="P:TeleCore.Primitive.Immutable.ImmutableArray`1.IsDefaultOrEmpty">
            <summary>
            Gets a value indicating whether this struct is empty or uninitialized.
            </summary>
        </member>
        <member name="P:TeleCore.Primitive.Immutable.ImmutableArray`1.TeleCore#Primitive#Immutable#IImmutableArray#Array">
            <summary>
            Gets an untyped reference to the array.
            </summary>
        </member>
        <member name="P:TeleCore.Primitive.Immutable.ImmutableArray`1.DebuggerDisplay">
            <summary>
            Gets the string to display in the debugger watches window for this instance.
            </summary>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.CopyTo(`0[])">
            <summary>
            Copies the contents of this array to the specified array.
            </summary>
            <param name="destination">The array to copy to.</param>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the contents of this array to the specified array.
            </summary>
            <param name="destination">The array to copy to.</param>
            <param name="destinationIndex">The index into the destination array to which the first copied element is written.</param>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
            <summary>
            Copies the contents of this array to the specified array.
            </summary>
            <param name="sourceIndex">The index into this collection of the first element to copy.</param>
            <param name="destination">The array to copy to.</param>
            <param name="destinationIndex">The index into the destination array to which the first copied element is written.</param>
            <param name="length">The number of elements to copy.</param>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.ToBuilder">
            <summary>
            Returns a builder that is populated with the same contents as this array.
            </summary>
            <returns>The new builder.</returns>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.GetEnumerator">
            <summary>
            Returns an enumerator for the contents of the array.
            </summary>
            <returns>An enumerator.</returns>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.Equals(TeleCore.Primitive.Immutable.ImmutableArray{`0})">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.CastUp``1(TeleCore.Primitive.Immutable.ImmutableArray{``0})">
            <summary>
            Initializes a new instance of the <see cref="T:TeleCore.Primitive.Immutable.ImmutableArray`1"/> struct based on the contents
            of an existing instance, allowing a covariant static cast to efficiently reuse the existing array.
            </summary>
            <param name="items">The array to initialize the array with. No copy is made.</param>
            <remarks>
            Covariant upcasts from this method may be reversed by calling the
            <see cref="M:TeleCore.Primitive.Immutable.ImmutableArray`1.As``1"/>  or <see cref="M:TeleCore.Primitive.Immutable.ImmutableArray`1.CastArray``1"/>method.
            </remarks>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.CastArray``1">
            <summary>
            Initializes a new instance of the <see cref="T:TeleCore.Primitive.Immutable.ImmutableArray`1"/> struct by casting the underlying
            array to an array of type <typeparam name="TOther"/>.
            </summary>
            <exception cref="T:System.InvalidCastException">Thrown if the cast is illegal.</exception>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.As``1">
            <summary>
            Creates an immutable array for this array, cast to a different element type.
            </summary>
            <typeparam name="TOther">The type of array element to return.</typeparam>
            <returns>
            A struct typed for the base element type. If the cast fails, an instance
            is returned whose <see cref="P:TeleCore.Primitive.Immutable.ImmutableArray`1.IsDefault"/> property returns <c>true</c>.
            </returns>
            <remarks>
            Arrays of derived elements types can be cast to arrays of base element types
            without reallocating the array.
            These upcasts can be reversed via this same method, casting an array of base
            element types to their derived types. However, downcasting is only successful
            when it reverses a prior upcasting operation.
            </remarks>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>
            Returns an enumerator for the contents of the array.
            </summary>
            <returns>An enumerator.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if the <see cref="P:TeleCore.Primitive.Immutable.ImmutableArray`1.IsDefault"/> property returns true.</exception>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator for the contents of the array.
            </summary>
            <returns>An enumerator.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if the <see cref="P:TeleCore.Primitive.Immutable.ImmutableArray`1.IsDefault"/> property returns true.</exception>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.ThrowNullRefIfNotInitialized">
            <summary>
            Throws a null reference exception if the array field is null.
            </summary>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray`1.ThrowInvalidOperationIfNotInitialized">
             <summary>
             Throws an <see cref="T:System.InvalidOperationException"/> if the <see cref="F:TeleCore.Primitive.Immutable.ImmutableArray`1.array"/> field is null, i.e. the
             <see cref="P:TeleCore.Primitive.Immutable.ImmutableArray`1.IsDefault"/> property returns true.  The
             <see cref="T:System.InvalidOperationException"/> message specifies that the operation cannot be performed
             on a default instance of <see cref="T:TeleCore.Primitive.Immutable.ImmutableArray`1"/>.
            
             This is intended for explicitly implemented interface method and property implementations.
             </summary>
        </member>
        <member name="T:TeleCore.Primitive.Immutable.ImmutableArrayBuilderDebuggerProxy`1">
            <summary>
            A simple view of the immutable collection that the debugger can show to the developer.
            </summary>
        </member>
        <member name="F:TeleCore.Primitive.Immutable.ImmutableArrayBuilderDebuggerProxy`1._builder">
            <summary>
            The collection to be enumerated.
            </summary>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArrayBuilderDebuggerProxy`1.#ctor(TeleCore.Primitive.Immutable.ImmutableArray{`0}.Builder)">
            <summary>
            Initializes a new instance of the <see cref="T:TeleCore.Primitive.Immutable.ImmutableArrayBuilderDebuggerProxy`1"/> class.
            </summary>
            <param name="builder">The collection to display in the debugger</param>
        </member>
        <member name="P:TeleCore.Primitive.Immutable.ImmutableArrayBuilderDebuggerProxy`1.A">
            <summary>
            Gets a simple debugger-viewable collection.
            </summary>
        </member>
        <member name="T:TeleCore.Primitive.Immutable.ImmutableArray">
            <summary>
            A set of initialization methods for instances of <see cref="T:TeleCore.Primitive.Immutable.ImmutableArray`1"/>.
            </summary>
        </member>
        <member name="F:TeleCore.Primitive.Immutable.ImmutableArray.TwoElementArray">
            <summary>
            A two element array useful for throwing exceptions the way LINQ does.
            </summary>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray.Create``1">
            <summary>
            Creates an empty <see cref="T:TeleCore.Primitive.Immutable.ImmutableArray`1"/>.
            </summary>
            <typeparam name="T">The type of element stored in the array.</typeparam>
            <returns>An empty array.</returns>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray.Create``1(``0)">
            <summary>
            Creates an <see cref="T:TeleCore.Primitive.Immutable.ImmutableArray`1"/> with the specified element as its only member.
            </summary>
            <typeparam name="T">The type of element stored in the array.</typeparam>
            <param name="item">The element to store in the array.</param>
            <returns>A 1-element immutable array containing the specified item.</returns>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray.Create``1(``0,``0)">
            <summary>
            Creates an <see cref="T:TeleCore.Primitive.Immutable.ImmutableArray`1"/> with the specified elements.
            </summary>
            <typeparam name="T">The type of element stored in the array.</typeparam>
            <param name="item1">The first element to store in the array.</param>
            <param name="item2">The second element to store in the array.</param>
            <returns>A 2-element immutable array containing the specified items.</returns>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray.Create``1(``0,``0,``0)">
            <summary>
            Creates an <see cref="T:TeleCore.Primitive.Immutable.ImmutableArray`1"/> with the specified elements.
            </summary>
            <typeparam name="T">The type of element stored in the array.</typeparam>
            <param name="item1">The first element to store in the array.</param>
            <param name="item2">The second element to store in the array.</param>
            <param name="item3">The third element to store in the array.</param>
            <returns>A 3-element immutable array containing the specified items.</returns>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray.Create``1(``0,``0,``0,``0)">
            <summary>
            Creates an <see cref="T:TeleCore.Primitive.Immutable.ImmutableArray`1"/> with the specified elements.
            </summary>
            <typeparam name="T">The type of element stored in the array.</typeparam>
            <param name="item1">The first element to store in the array.</param>
            <param name="item2">The second element to store in the array.</param>
            <param name="item3">The third element to store in the array.</param>
            <param name="item4">The fourth element to store in the array.</param>
            <returns>A 4-element immutable array containing the specified items.</returns>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray.Create``1(System.ReadOnlySpan{``0})">
            <summary>
            Creates an <see cref="T:TeleCore.Primitive.Immutable.ImmutableArray`1"/> with the specified elements.
            </summary>
            <typeparam name="T">The type of element stored in the array.</typeparam>
            <param name="items">The elements to store in the array.</param>
            <returns>An immutable array containing the specified items.</returns>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray.Create``1(System.Span{``0})">
            <summary>
            Creates an <see cref="T:TeleCore.Primitive.Immutable.ImmutableArray`1"/> with the specified elements.
            </summary>
            <typeparam name="T">The type of element stored in the array.</typeparam>
            <param name="items">The elements to store in the array.</param>
            <returns>An immutable array containing the specified items.</returns>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray.ToImmutableArray``1(System.ReadOnlySpan{``0})">
            <summary>
            Produce an immutable array of contents from specified elements.
            </summary>
            <typeparam name="T">The type of element in the list.</typeparam>
            <param name="items">The elements to store in the array.</param>
            <returns>An immutable array containing the specified items.</returns>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray.ToImmutableArray``1(System.Span{``0})">
            <summary>
            Produce an immutable array of contents from specified elements.
            </summary>
            <typeparam name="T">The type of element in the list.</typeparam>
            <param name="items">The elements to store in the array.</param>
            <returns>An immutable array containing the specified items.</returns>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray.CreateRange``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Creates an <see cref="T:TeleCore.Primitive.Immutable.ImmutableArray`1"/> populated with the contents of the specified sequence.
            </summary>
            <typeparam name="T">The type of element stored in the array.</typeparam>
            <param name="items">The elements to store in the array.</param>
            <returns>An immutable array.</returns>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray.Create``1(``0[])">
            <summary>
            Creates an <see cref="T:TeleCore.Primitive.Immutable.ImmutableArray`1"/> with the specified elements.
            </summary>
            <typeparam name="T">The type of element stored in the array.</typeparam>
            <param name="items">The elements to store in the array.</param>
            <returns>An immutable array containing the specified items.</returns>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray.Create``1(``0[],System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:TeleCore.Primitive.Immutable.ImmutableArray`1"/> struct.
            </summary>
            <param name="items">The array to initialize the array with. A defensive copy is made.</param>
            <param name="start">The index of the first element in the source array to include in the resulting array.</param>
            <param name="length">The number of elements from the source array to include in the resulting array.</param>
            <remarks>
            This overload allows helper methods or custom builder classes to efficiently avoid paying a redundant
            tax for copying an array when the new array is a segment of an existing array.
            </remarks>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray.Create``1(TeleCore.Primitive.Immutable.ImmutableArray{``0},System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:TeleCore.Primitive.Immutable.ImmutableArray`1"/> struct.
            </summary>
            <param name="items">The array to initialize the array with.
            The selected array segment may be copied into a new array.</param>
            <param name="start">The index of the first element in the source array to include in the resulting array.</param>
            <param name="length">The number of elements from the source array to include in the resulting array.</param>
            <remarks>
            This overload allows helper methods or custom builder classes to efficiently avoid paying a redundant
            tax for copying an array when the new array is a segment of an existing array.
            </remarks>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray.CreateRange``2(TeleCore.Primitive.Immutable.ImmutableArray{``0},System.Func{``0,``1})">
            <summary>
            Initializes a new instance of the <see cref="T:TeleCore.Primitive.Immutable.ImmutableArray`1"/> struct.
            </summary>
            <param name="items">The source array to initialize the resulting array with.</param>
            <param name="selector">The function to apply to each element from the source array.</param>
            <remarks>
            This overload allows efficient creation of an <see cref="T:TeleCore.Primitive.Immutable.ImmutableArray`1"/> based on an existing
            <see cref="T:TeleCore.Primitive.Immutable.ImmutableArray`1"/>, where a mapping function needs to be applied to each element from
            the source array.
            </remarks>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray.CreateRange``2(TeleCore.Primitive.Immutable.ImmutableArray{``0},System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            Initializes a new instance of the <see cref="T:TeleCore.Primitive.Immutable.ImmutableArray`1"/> struct.
            </summary>
            <param name="items">The source array to initialize the resulting array with.</param>
            <param name="start">The index of the first element in the source array to include in the resulting array.</param>
            <param name="length">The number of elements from the source array to include in the resulting array.</param>
            <param name="selector">The function to apply to each element from the source array included in the resulting array.</param>
            <remarks>
            This overload allows efficient creation of an <see cref="T:TeleCore.Primitive.Immutable.ImmutableArray`1"/> based on a slice of an existing
            <see cref="T:TeleCore.Primitive.Immutable.ImmutableArray`1"/>, where a mapping function needs to be applied to each element from the source array
            included in the resulting array.
            </remarks>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray.CreateRange``3(TeleCore.Primitive.Immutable.ImmutableArray{``0},System.Func{``0,``1,``2},``1)">
            <summary>
            Initializes a new instance of the <see cref="T:TeleCore.Primitive.Immutable.ImmutableArray`1"/> struct.
            </summary>
            <param name="items">The source array to initialize the resulting array with.</param>
            <param name="selector">The function to apply to each element from the source array.</param>
            <param name="arg">An argument to be passed to the selector mapping function.</param>
            <remarks>
            This overload allows efficient creation of an <see cref="T:TeleCore.Primitive.Immutable.ImmutableArray`1"/> based on an existing
            <see cref="T:TeleCore.Primitive.Immutable.ImmutableArray`1"/>, where a mapping function needs to be applied to each element from
            the source array.
            </remarks>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray.CreateRange``3(TeleCore.Primitive.Immutable.ImmutableArray{``0},System.Int32,System.Int32,System.Func{``0,``1,``2},``1)">
            <summary>
            Initializes a new instance of the <see cref="T:TeleCore.Primitive.Immutable.ImmutableArray`1"/> struct.
            </summary>
            <param name="items">The source array to initialize the resulting array with.</param>
            <param name="start">The index of the first element in the source array to include in the resulting array.</param>
            <param name="length">The number of elements from the source array to include in the resulting array.</param>
            <param name="selector">The function to apply to each element from the source array included in the resulting array.</param>
            <param name="arg">An argument to be passed to the selector mapping function.</param>
            <remarks>
            This overload allows efficient creation of an <see cref="T:TeleCore.Primitive.Immutable.ImmutableArray`1"/> based on a slice of an existing
            <see cref="T:TeleCore.Primitive.Immutable.ImmutableArray`1"/>, where a mapping function needs to be applied to each element from the source array
            included in the resulting array.
            </remarks>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray.CreateBuilder``1">
            <summary>
            Initializes a new instance of the <see cref="T:TeleCore.Primitive.Immutable.ImmutableArray`1.Builder"/> class.
            </summary>
            <typeparam name="T">The type of elements stored in the array.</typeparam>
            <returns>A new builder.</returns>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray.CreateBuilder``1(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:TeleCore.Primitive.Immutable.ImmutableArray`1.Builder"/> class.
            </summary>
            <typeparam name="T">The type of elements stored in the array.</typeparam>
            <param name="initialCapacity">The size of the initial array backing the builder.</param>
            <returns>A new builder.</returns>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray.ToImmutableArray``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Enumerates a sequence exactly once and produces an immutable array of its contents.
            </summary>
            <typeparam name="TSource">The type of element in the sequence.</typeparam>
            <param name="items">The sequence to enumerate.</param>
            <returns>An immutable array containing the specified items.</returns>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray.ToImmutableArray``1(TeleCore.Primitive.Immutable.ImmutableArray{``0}.Builder)">
            <summary>
            Returns an immutable copy of the current contents of the builder's collection.
            </summary>
            <param name="builder">The builder to create the immutable array from.</param>
            <returns>An immutable array containing the specified items from <paramref name="builder"/>.</returns>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray.BinarySearch``1(TeleCore.Primitive.Immutable.ImmutableArray{``0},``0)">
            <summary>
            Searches an entire one-dimensional sorted <see cref="T:TeleCore.Primitive.Immutable.ImmutableArray`1"/> for a specific element,
            using the <see cref="T:System.IComparable`1"/> generic interface implemented by each element
            of the <see cref="T:TeleCore.Primitive.Immutable.ImmutableArray`1"/> and by the specified object.
            </summary>
            <typeparam name="T">The type of element stored in the array.</typeparam>
            <param name="array">The sorted, one-dimensional array to search.</param>
            <param name="value">The object to search for.</param>
            <returns>
            The index of the specified <paramref name="value"/> in the specified array, if <paramref name="value"/> is found.
            If <paramref name="value"/> is not found and <paramref name="value"/> is less than one or more elements in array,
            a negative number which is the bitwise complement of the index of the first
            element that is larger than <paramref name="value"/>. If <paramref name="value"/> is not found and <paramref name="value"/> is greater
            than any of the elements in array, a negative number which is the bitwise
            complement of (the index of the last element plus 1).
            </returns>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="value"/> does not implement the <see cref="T:System.IComparable`1"/> generic interface, and
            the search encounters an element that does not implement the <see cref="T:System.IComparable`1"/>
            generic interface.
            </exception>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray.BinarySearch``1(TeleCore.Primitive.Immutable.ImmutableArray{``0},``0,System.Collections.Generic.IComparer{``0})">
            <summary>
            Searches an entire one-dimensional sorted <see cref="T:TeleCore.Primitive.Immutable.ImmutableArray`1"/> for a value using
            the specified <see cref="T:System.Collections.Generic.IComparer`1"/> generic interface.
            </summary>
            <typeparam name="T">The type of element stored in the array.</typeparam>
            <param name="array">The sorted, one-dimensional array to search.</param>
            <param name="value">The object to search for.</param>
            <param name="comparer">
            The <see cref="T:System.Collections.Generic.IComparer`1"/> implementation to use when comparing
            elements; or null to use the <see cref="T:System.IComparable`1"/> implementation of each
            element.
            </param>
            <returns>
            The index of the specified <paramref name="value"/> in the specified array, if <paramref name="value"/> is found.
            If <paramref name="value"/> is not found and <paramref name="value"/> is less than one or more elements in array,
            a negative number which is the bitwise complement of the index of the first
            element that is larger than <paramref name="value"/>. If <paramref name="value"/> is not found and <paramref name="value"/> is greater
            than any of the elements in array, a negative number which is the bitwise
            complement of (the index of the last element plus 1).
            </returns>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="comparer"/> is null, <paramref name="value"/> does not implement the <see cref="T:System.IComparable`1"/> generic interface, and
            the search encounters an element that does not implement the <see cref="T:System.IComparable`1"/>
            generic interface.
            </exception>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray.BinarySearch``1(TeleCore.Primitive.Immutable.ImmutableArray{``0},System.Int32,System.Int32,``0)">
            <summary>
            Searches a range of elements in a one-dimensional sorted <see cref="T:TeleCore.Primitive.Immutable.ImmutableArray`1"/> for
            a value, using the <see cref="T:System.IComparable`1"/> generic interface implemented by
            each element of the <see cref="T:TeleCore.Primitive.Immutable.ImmutableArray`1"/> and by the specified value.
            </summary>
            <typeparam name="T">The type of element stored in the array.</typeparam>
            <param name="array">The sorted, one-dimensional array to search.</param>
            <param name="index">The starting index of the range to search.</param>
            <param name="length">The length of the range to search.</param>
            <param name="value">The object to search for.</param>
            <returns>
            The index of the specified <paramref name="value"/> in the specified <paramref name="array"/>, if <paramref name="value"/> is found.
            If <paramref name="value"/> is not found and <paramref name="value"/> is less than one or more elements in <paramref name="array"/>,
            a negative number which is the bitwise complement of the index of the first
            element that is larger than <paramref name="value"/>. If <paramref name="value"/> is not found and <paramref name="value"/> is greater
            than any of the elements in <paramref name="array"/>, a negative number which is the bitwise
            complement of (the index of the last element plus 1).
            </returns>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="value"/> does not implement the <see cref="T:System.IComparable`1"/> generic interface, and
            the search encounters an element that does not implement the <see cref="T:System.IComparable`1"/>
            generic interface.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="index"/> and <paramref name="length"/> do not specify a valid range in <paramref name="array"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than the lower bound of <paramref name="array"/>. -or- <paramref name="length"/> is less than zero.
            </exception>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableArray.BinarySearch``1(TeleCore.Primitive.Immutable.ImmutableArray{``0},System.Int32,System.Int32,``0,System.Collections.Generic.IComparer{``0})">
            <summary>
            Searches a range of elements in a one-dimensional sorted <see cref="T:TeleCore.Primitive.Immutable.ImmutableArray`1"/> for
            a value, using the specified <see cref="T:System.Collections.Generic.IComparer`1"/> generic
            interface.
            </summary>
            <typeparam name="T">The type of element stored in the array.</typeparam>
            <param name="array">The sorted, one-dimensional array to search.</param>
            <param name="index">The starting index of the range to search.</param>
            <param name="length">The length of the range to search.</param>
            <param name="value">The object to search for.</param>
            <param name="comparer">
            The <see cref="T:System.Collections.Generic.IComparer`1"/> implementation to use when comparing
            elements; or null to use the <see cref="T:System.IComparable`1"/> implementation of each
            element.
            </param>
            <returns>
            The index of the specified <paramref name="value"/> in the specified <paramref name="array"/>, if <paramref name="value"/> is found.
            If <paramref name="value"/> is not found and <paramref name="value"/> is less than one or more elements in <paramref name="array"/>,
            a negative number which is the bitwise complement of the index of the first
            element that is larger than <paramref name="value"/>. If <paramref name="value"/> is not found and <paramref name="value"/> is greater
            than any of the elements in <paramref name="array"/>, a negative number which is the bitwise
            complement of (the index of the last element plus 1).
            </returns>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="comparer"/> is null, <paramref name="value"/> does not implement the <see cref="T:System.IComparable`1"/> generic
            interface, and the search encounters an element that does not implement the
            <see cref="T:System.IComparable`1"/> generic interface.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="index"/> and <paramref name="length"/> do not specify a valid range in <paramref name="array"/>.-or-<paramref name="comparer"/> is null,
            and <paramref name="value"/> is of a type that is not compatible with the elements of <paramref name="array"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than the lower bound of <paramref name="array"/>. -or- <paramref name="length"/> is less than zero.
            </exception>
        </member>
        <member name="T:TeleCore.Primitive.Immutable.ImmutableExtensions">
            <summary>
            Extension methods for immutable types.
            </summary>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableExtensions.AsOrderedCollection``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Provides a known wrapper around a sequence of elements that provides the number of elements
            and an indexer into its contents.
            </summary>
            <typeparam name="T">The type of elements in the collection.</typeparam>
            <param name="sequence">The collection.</param>
            <returns>An ordered collection.  May not be thread-safe.  Never null.</returns>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableExtensions.ClearFastWhenEmpty``1(System.Collections.Generic.Stack{``0})">
            <summary>
            Clears the specified stack.  For empty stacks, it avoids the call to <see cref="M:System.Collections.Generic.Stack`1.Clear"/>, which
            avoids a call into the runtime's implementation of <see cref="M:System.Array.Clear(System.Array,System.Int32,System.Int32)"/>, helping performance,
            in particular around inlining.  <see cref="P:System.Collections.Generic.Stack`1.Count"/> typically gets inlined by today's JIT, while
            <see cref="M:System.Collections.Generic.Stack`1.Clear"/> and <see cref="M:System.Array.Clear(System.Array,System.Int32,System.Int32)"/> typically don't.
            </summary>
            <typeparam name="T">Specifies the type of data in the stack to be cleared.</typeparam>
            <param name="stack">The stack to clear.</param>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableExtensions.GetEnumerableDisposable``2(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Gets a disposable enumerable that can be used as the source for a C# foreach loop
            that will not box the enumerator if it is of a particular type.
            </summary>
            <typeparam name="T">The type of value to be enumerated.</typeparam>
            <typeparam name="TEnumerator">The type of the Enumerator struct.</typeparam>
            <param name="enumerable">The collection to be enumerated.</param>
            <returns>A struct that enumerates the collection.</returns>
        </member>
        <member name="T:TeleCore.Primitive.Immutable.ImmutableExtensions.ListOfTWrapper`1">
            <summary>
            Wraps a <see cref="T:System.Collections.Generic.IList`1"/> as an ordered collection.
            </summary>
            <typeparam name="T">The type of element in the collection.</typeparam>
        </member>
        <member name="F:TeleCore.Primitive.Immutable.ImmutableExtensions.ListOfTWrapper`1._collection">
            <summary>
            The list being exposed.
            </summary>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableExtensions.ListOfTWrapper`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:TeleCore.Primitive.Immutable.ImmutableExtensions.ListOfTWrapper`1"/> class.
            </summary>
            <param name="collection">The collection.</param>
        </member>
        <member name="P:TeleCore.Primitive.Immutable.ImmutableExtensions.ListOfTWrapper`1.Count">
            <summary>
            Gets the count.
            </summary>
        </member>
        <member name="P:TeleCore.Primitive.Immutable.ImmutableExtensions.ListOfTWrapper`1.Item(System.Int32)">
            <summary>
            Gets the <typeparamref name="T"/> at the specified index.
            </summary>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableExtensions.ListOfTWrapper`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableExtensions.ListOfTWrapper`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="T:TeleCore.Primitive.Immutable.ImmutableExtensions.FallbackWrapper`1">
            <summary>
            Wraps any <see cref="T:System.Collections.Generic.IEnumerable`1"/> as an ordered, indexable list.
            </summary>
            <typeparam name="T">The type of element in the collection.</typeparam>
        </member>
        <member name="F:TeleCore.Primitive.Immutable.ImmutableExtensions.FallbackWrapper`1._sequence">
            <summary>
            The original sequence.
            </summary>
        </member>
        <member name="F:TeleCore.Primitive.Immutable.ImmutableExtensions.FallbackWrapper`1._collection">
            <summary>
            The list-ified sequence.
            </summary>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableExtensions.FallbackWrapper`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:TeleCore.Primitive.Immutable.ImmutableExtensions.FallbackWrapper`1"/> class.
            </summary>
            <param name="sequence">The sequence.</param>
        </member>
        <member name="P:TeleCore.Primitive.Immutable.ImmutableExtensions.FallbackWrapper`1.Count">
            <summary>
            Gets the count.
            </summary>
        </member>
        <member name="P:TeleCore.Primitive.Immutable.ImmutableExtensions.FallbackWrapper`1.Item(System.Int32)">
            <summary>
            Gets the <typeparamref name="T"/> at the specified index.
            </summary>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableExtensions.FallbackWrapper`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableExtensions.FallbackWrapper`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableExtensions.TryGetCount``1(System.Collections.Generic.IEnumerable{``0},System.Int32@)">
            <summary>
            Tries to divine the number of elements in a sequence without actually enumerating each element.
            </summary>
            <typeparam name="T">The type of elements in the sequence.</typeparam>
            <param name="sequence">The enumerable source.</param>
            <param name="count">Receives the number of elements in the enumeration, if it could be determined.</param>
            <returns><c>true</c> if the count could be determined; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableExtensions.TryGetCount``1(System.Collections.IEnumerable,System.Int32@)">
            <summary>
            Tries to divine the number of elements in a sequence without actually enumerating each element.
            </summary>
            <typeparam name="T">The type of elements in the sequence.</typeparam>
            <param name="sequence">The enumerable source.</param>
            <param name="count">Receives the number of elements in the enumeration, if it could be determined.</param>
            <returns><c>true</c> if the count could be determined; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableExtensions.GetCount``1(System.Collections.Generic.IEnumerable{``0}@)">
            <summary>
            Gets the number of elements in the specified sequence,
            while guaranteeing that the sequence is only enumerated once
            in total by this method and the caller.
            </summary>
            <typeparam name="T">The type of element in the collection.</typeparam>
            <param name="sequence">The sequence.</param>
            <returns>The number of elements in the sequence.</returns>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableExtensions.TryCopyTo``1(System.Collections.Generic.IEnumerable{``0},``0[],System.Int32)">
            <summary>
            Tries to copy the elements in the sequence to the specified array,
            if the sequence is a well-known collection type. Otherwise, does
            nothing and returns <c>false</c>.
            </summary>
            <typeparam name="T">The type of element in the sequence.</typeparam>
            <param name="sequence">The sequence to copy.</param>
            <param name="array">The array to copy the elements to.</param>
            <param name="arrayIndex">The index in the array to start copying.</param>
            <returns><c>true</c> if the elements were successfully copied; <c>false</c> otherwise.</returns>
            <remarks>
            <para>
            The reason we don't copy anything other than for well-known types is that a malicious interface
            implementation of <see cref="T:System.Collections.Generic.ICollection`1"/> could hold on to the array when its <see cref="M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)"/>
            method is called. If the array it holds onto underlies an <see cref="T:TeleCore.Primitive.Immutable.ImmutableArray`1"/>, it could violate
            immutability by modifying the array.
            </para>
            </remarks>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.ImmutableExtensions.ToArray``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Gets a copy of a sequence as an array.
            </summary>
            <typeparam name="T">The type of element.</typeparam>
            <param name="sequence">The sequence to be copied.</param>
            <param name="count">The number of elements in the sequence.</param>
            <returns>The array.</returns>
            <remarks>
            This is more efficient than the <see cref="M:System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})"/> extension method
            because that only tries to cast the sequence to <see cref="T:System.Collections.Generic.ICollection`1"/> to determine
            the count before it falls back to reallocating arrays as it enumerates.
            </remarks>
        </member>
        <member name="T:TeleCore.Primitive.Immutable.IOrderedCollection`1">
            <summary>
            Describes an ordered collection of elements.
            </summary>
            <typeparam name="T">The type of element in the collection.</typeparam>
        </member>
        <member name="P:TeleCore.Primitive.Immutable.IOrderedCollection`1.Count">
            <summary>
            Gets the number of elements in the collection.
            </summary>
        </member>
        <member name="P:TeleCore.Primitive.Immutable.IOrderedCollection`1.Item(System.Int32)">
            <summary>
            Gets the element in the collection at a given index.
            </summary>
        </member>
        <member name="T:TeleCore.Primitive.Immutable.IStrongEnumerable`2">
            <summary>
            An interface that must be implemented by collections that want to avoid
            boxing their own enumerators when using the
            <see cref="!:ImmutableExtensions.GetEnumerableDisposable&lt;T, TEnumerator&gt;(IEnumerable&lt;T&gt;)"/>
            method.
            </summary>
            <typeparam name="T">The type of value to be enumerated.</typeparam>
            <typeparam name="TEnumerator">The type of the enumerator struct.</typeparam>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.IStrongEnumerable`2.GetEnumerator">
            <summary>
            Gets the strongly-typed enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="T:TeleCore.Primitive.Immutable.IStrongEnumerator`1">
            <summary>
            An <see cref="T:System.Collections.Generic.IEnumerator`1"/>-like interface that does not derive from <see cref="T:System.IDisposable"/>.
            </summary>
            <typeparam name="T">The type of value to be enumerated.</typeparam>
            <remarks>
            This interface is useful because some enumerator struct types do not want to implement
            <see cref="T:System.IDisposable"/> since it increases the size of the generated code in foreach.
            </remarks>
        </member>
        <member name="P:TeleCore.Primitive.Immutable.IStrongEnumerator`1.Current">
            <summary>
            Returns the current element.
            </summary>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.IStrongEnumerator`1.MoveNext">
            <summary>
            Advances to the next element.
            </summary>
        </member>
        <member name="T:TeleCore.Primitive.Immutable.LightImmutableArray`1.ImmutableArrayEnumerator">
            <summary>
                An array enumerator.
            </summary>
            <remarks>
                It is important that this enumerator does NOT implement <see cref="T:System.IDisposable" />.
                We want the iterator to inline when we do foreach and to not result in
                a try/finally frame in the client.
            </remarks>
        </member>
        <member name="F:TeleCore.Primitive.Immutable.LightImmutableArray`1.ImmutableArrayEnumerator._index">
            <summary>
                The currently enumerated position.
            </summary>
            <value>
                -1 before the first call to <see cref="M:TeleCore.Primitive.Immutable.LightImmutableArray`1.ImmutableArrayEnumerator.MoveNext" />.
                >= this.array.Length after <see cref="M:TeleCore.Primitive.Immutable.LightImmutableArray`1.ImmutableArrayEnumerator.MoveNext" /> returns false.
            </value>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.LightImmutableArray`1.ImmutableArrayEnumerator.#ctor(`0[])">
            <summary>
                Initializes a new instance of the <see cref="T:TeleCore.Primitive.Immutable.LightImmutableArray`1.ImmutableArrayEnumerator" /> struct.
            </summary>
            <param name="array">The array to enumerate.</param>
        </member>
        <member name="P:TeleCore.Primitive.Immutable.LightImmutableArray`1.ImmutableArrayEnumerator.Current">
            <summary>
                Gets the currently enumerated value.
            </summary>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.LightImmutableArray`1.ImmutableArrayEnumerator.MoveNext">
            <summary>
                Advances to the next value to be enumerated.
            </summary>
            <returns><c>true</c> if another item exists in the array; <c>false</c> otherwise.</returns>
        </member>
        <member name="T:TeleCore.Primitive.Immutable.LightImmutableArray`1.ImmutableArrayEnumeratorObject">
            <summary>
            An array enumerator that implements <see cref="T:System.Collections.Generic.IEnumerator`1"/> pattern (including <see cref="T:System.IDisposable"/>).
            </summary>
        </member>
        <member name="F:TeleCore.Primitive.Immutable.LightImmutableArray`1.ImmutableArrayEnumeratorObject.s_EmptyEnumerator">
            <summary>
            A shareable singleton for enumerating empty arrays.
            </summary>
        </member>
        <member name="F:TeleCore.Primitive.Immutable.LightImmutableArray`1.ImmutableArrayEnumeratorObject._array">
            <summary>
            The array being enumerated.
            </summary>
        </member>
        <member name="F:TeleCore.Primitive.Immutable.LightImmutableArray`1.ImmutableArrayEnumeratorObject._index">
            <summary>
            The currently enumerated position.
            </summary>
            <value>
            -1 before the first call to <see cref="M:TeleCore.Primitive.Immutable.LightImmutableArray`1.ImmutableArrayEnumeratorObject.MoveNext"/>.
            this.array.Length - 1 after MoveNext returns false.
            </value>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.LightImmutableArray`1.ImmutableArrayEnumeratorObject.#ctor(`0[])">
            <summary>
            Initializes a new instance of the <see cref="!:Enumerator"/> class.
            </summary>
        </member>
        <member name="P:TeleCore.Primitive.Immutable.LightImmutableArray`1.ImmutableArrayEnumeratorObject.Current">
            <summary>
            Gets the currently enumerated value.
            </summary>
        </member>
        <member name="P:TeleCore.Primitive.Immutable.LightImmutableArray`1.ImmutableArrayEnumeratorObject.System#Collections#IEnumerator#Current">
            <summary>
            Gets the currently enumerated value.
            </summary>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.LightImmutableArray`1.ImmutableArrayEnumeratorObject.MoveNext">
            <summary>
            If another item exists in the array, advances to the next value to be enumerated.
            </summary>
            <returns><c>true</c> if another item exists in the array; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.LightImmutableArray`1.ImmutableArrayEnumeratorObject.System#Collections#IEnumerator#Reset">
            <summary>
            Resets enumeration to the start of the array.
            </summary>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.LightImmutableArray`1.ImmutableArrayEnumeratorObject.Dispose">
            <summary>
            Disposes this enumerator.
            </summary>
            <remarks>
            Currently has no action.
            </remarks>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.LightImmutableArray`1.ImmutableArrayEnumeratorObject.Create(`0[])">
            <summary>
            Creates an enumerator for the specified array.
            </summary>
        </member>
        <member name="T:TeleCore.Primitive.Immutable.ValidatedNotNullAttribute">
            <summary>
            Indicates to Code Analysis that a method validates a particular parameter.
            </summary>
        </member>
        <member name="T:TeleCore.Primitive.Immutable.Requires">
            <summary>
            Common runtime checks that throw <see cref="T:System.ArgumentException"/> upon failure.
            </summary>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.Requires.NotNull``1(``0,System.String)">
            <summary>
            Throws an exception if the specified parameter's value is null.
            </summary>
            <typeparam name="T">The type of the parameter.</typeparam>
            <param name="value">The value of the argument.</param>
            <param name="parameterName">The name of the parameter to include in any thrown exception.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="value"/> is <c>null</c></exception>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.Requires.NotNullPassthrough``1(``0,System.String)">
            <summary>
            Throws an exception if the specified parameter's value is null.  It passes through the specified value back as a return value.
            </summary>
            <typeparam name="T">The type of the parameter.</typeparam>
            <param name="value">The value of the argument.</param>
            <param name="parameterName">The name of the parameter to include in any thrown exception.</param>
            <returns>The value of the parameter.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="value"/> is <c>null</c></exception>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.Requires.NotNullAllowStructs``1(``0,System.String)">
            <summary>
            Throws an exception if the specified parameter's value is null.
            </summary>
            <typeparam name="T">The type of the parameter.</typeparam>
            <param name="value">The value of the argument.</param>
            <param name="parameterName">The name of the parameter to include in any thrown exception.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="value"/> is <c>null</c></exception>
            <remarks>
            This method exists for callers who themselves only know the type as a generic parameter which
            may or may not be a class, but certainly cannot be null.
            </remarks>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.Requires.FailArgumentNullException(System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentNullException"/>.
            </summary>
            <param name="parameterName">The name of the parameter that was null.</param>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.Requires.Range(System.Boolean,System.String,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if a condition does not evaluate to true.
            </summary>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.Requires.FailRange(System.String,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/>.
            </summary>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.Requires.Argument(System.Boolean,System.String,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> if a condition does not evaluate to true.
            </summary>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.Requires.Argument(System.Boolean)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> if a condition does not evaluate to true.
            </summary>
        </member>
        <member name="M:TeleCore.Primitive.Immutable.Requires.FailObjectDisposed``1(``0)">
            <summary>
            Throws an <see cref="T:System.ObjectDisposedException"/> for a disposed object.
            </summary>
            <typeparam name="TDisposed">Specifies the type of the disposed object.</typeparam>
            <param name="disposed">The disposed object.</param>
        </member>
        <member name="T:TeleCore.Primitive.IntVec3Rot">
            <summary>
                An IntVec3 with a relative direction attached.
            </summary>
        </member>
        <member name="T:TeleCore.Primitive.OneOfLoadable">
            <summary>
                Allows loading a simple <see cref="N:OneOf" /> for int and float.
            </summary>
        </member>
        <member name="M:TeleCore.Primitive.StaticStackGrid`2.Notify_AddValue(Verse.IntVec3,`0,TeleCore.Primitive.Numeric{`1})">
            <summary>
            Public accessor to spawn gas.
            </summary>
        </member>
        <member name="M:TeleCore.RoomComponent.PostCreate(TeleCore.RoomTracker)">
            <summary>
                Called after all <see cref="T:TeleCore.RoomComponent" />s on the <see cref="T:TeleCore.RoomTracker" /> parent have been created.
            </summary>
        </member>
        <member name="M:TeleCore.RoomComponent.FinalizeMapInit">
            <summary>
                Called after all map data has been initialized.
                Runs on the main game thread, so it is safe to use Unity methods.
            </summary>
        </member>
        <member name="M:TeleCore.RoomComponent.Disband(TeleCore.RoomTracker,Verse.Map)">
            <summary>
                Called when disbanded by the <see cref="T:TeleCore.RoomTracker" /> parent.
            </summary>
        </member>
        <member name="M:TeleCore.RoomComponent.Notify_Reused">
            <summary>
                Triggered when the room is reused after regeneration without deletion in the game.
            </summary>
        </member>
        <member name="M:TeleCore.RoomComponent.Notify_RoofClosed">
            <summary>
                Called when the room's roof has been fully constructed in the game.
            </summary>
        </member>
        <member name="M:TeleCore.RoomComponent.Notify_RoofOpened">
            <summary>
                Called when the room is considered to be outdoors after the roof has been changed.
            </summary>
        </member>
        <member name="M:TeleCore.RoomComponent.Notify_RoofChanged">
            <summary>
                Alerted if there's any change to the roof of the room (constructed or deconstructed)
            </summary>
        </member>
        <member name="M:TeleCore.RoomComponent.Notify_BorderThingAdded(Verse.Thing)">
            <summary>
                Notifies the game when an object has been added to the border of the room.
            </summary>
            <param name="thing">The object that was added to the border of the room.</param>
        </member>
        <member name="M:TeleCore.RoomComponent.Notify_ThingAdded(Verse.Thing)">
            <summary>
                Notifies the game when an object is added to the room.
            </summary>
            <param name="thing">The object that was added to the room.</param>
        </member>
        <member name="M:TeleCore.RoomComponent.Notify_ThingRemoved(Verse.Thing)">
            <summary>
                Called when an object is removed from the room in the game.
            </summary>
            <param name="thing">The object that was removed from the room.</param>
        </member>
        <member name="M:TeleCore.RoomComponent.Notify_PawnEnteredRoom(Verse.Pawn)">
            <summary>
                Triggered when a character (pawn) enters the room in the game.
            </summary>
            <param name="pawn">The game character that entered the room.</param>
        </member>
        <member name="M:TeleCore.RoomComponent.Notify_PawnLeftRoom(Verse.Pawn)">
            <summary>
                Triggered when a character (pawn) leaves the room in the game.
            </summary>
            <param name="pawn">The game character that left the room.</param>
        </member>
        <member name="M:TeleCore.RoomComponent.Init(TeleCore.RoomTracker[])">
            <summary>
                Runs once on initialization.
            </summary>
        </member>
        <member name="M:TeleCore.RoomComponent.PostInit(TeleCore.RoomTracker[])">
            <summary>
                Runs once after all components have been initialized.
            </summary>
        </member>
        <member name="T:TeleCore.RoomNeighborSet">
            <summary>
            A room's neighbor can be defined in different ways:
            <para>- A true neighbor (ie: Doorways)</para>
            <para>- Any attached room (Rooms on the other side of doors/walls)</para>
            So we need to track of that.
            </summary>
        </member>
        <member name="T:TeleCore.RoomOverlayRenderer">
            <summary>
            </summary>
        </member>
        <member name="T:TeleCore.CompProperties_Network">
            <summary>
            </summary>
        </member>
        <member name="T:TeleCore.TeleComp">
            <summary>
                Base class for TeleCore ThingComps.
            </summary>
        </member>
        <member name="T:TeleCore.ScribeList`1">
            <summary>
                A wrapper to expose generic lists as values. I.e: A <see cref="T:System.Collections.Generic.List`1" /> of <see cref="T:TeleCore.ScribeList`1" />
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:TeleCore.ThingValue">
            <summary>
                Define a Def with various values for dynamic and versatile uses.
                XML Notation: <defName>value, chance, QualityCategory, stuffDef</defName>
            </summary>
        </member>
        <member name="T:TeleCore.PathHelperInfo">
            <summary>
                Handles additional pathing data, such as avoid weights, walkable/wander cells and danger
            </summary>
        </member>
        <member name="T:TeleCore.ThingTrackerMapInfo">
            <summary>
            </summary>
        </member>
        <member name="T:TeleCore.ThingTrackerComp">
            <summary>
                Provides an abstract base for custom Thing-tracking worker classes which process Thing-Data on Spawn/Despawn/State
                change events
            </summary>
        </member>
        <member name="T:TeleCore.RoomUpdatePatches">
            <summary>
                Main handling of changes in regions and rooms of RimWorld
            </summary>
        </member>
        <member name="T:TeleCore.PlaceWorker_Pipe">
            <summary>
                A default placeworker for network pipes, uses the ThingDef.uiIconPath as the ghost render texture.
            </summary>
        </member>
        <member name="T:TeleCore.PlaceWorker_TurretGunTop">
            <summary>
                Renders all turrets defined in TeleDefExtension ontop of the placable thing.
            </summary>
        </member>
        <member name="F:TeleCore.AnimationPart.keyFrames">
            <summary>
                The list of keyframe collections for each material defined by the parent textureParts list
            </summary>
            ScribeList
        </member>
        <member name="M:TeleCore.AnimationSaveUtility.SaveWorkFile(System.String,System.String,System.Action)">
            <summary>
                Saves the custom .anim file for working on the animation.
            </summary>
        </member>
        <member name="M:TeleCore.AnimationSaveUtility.CreateAnimationDef(System.String,System.String,System.Action)">
            <summary>
                Creates a new AnimationDef file.
            </summary>
        </member>
        <member name="T:TeleCore.DesignationTexturePack">
            <summary>
                The texture pack provides textures for the custom build menu
            </summary>
        </member>
        <member name="T:TeleCore.UILayout">
            <summary>
                A cachable Rect set, allows you to set rects with a tag and access them via a string tag indexer;
            </summary>
        </member>
        <member name="T:TeleCore.ApplicationQuitUtility">
            <summary>
                Provides extensions to register custom events whenever the application closes.
            </summary>
        </member>
        <member name="M:TeleCore.ApplicationQuitUtility.RegisterQuitEvent(System.Action)">
            <summary>
                Adds a new event to the quit-event chain.
            </summary>
        </member>
        <member name="T:TeleCore.TeleRoot">
            <summary>
                Experimental Updating of custom core related parts
            </summary>
        </member>
        <member name="T:TeleCore.TeleUpdateManager">
            <summary>
            </summary>
        </member>
        <member name="M:TeleCore.TeleUpdateManager.Notify_EnqueueNewSingleAction(System.Action)">
            <summary>
                Enqueues a single action to be executed as soon as possible on the main thread.
            </summary>
        </member>
        <member name="T:TeleCore.ClipBoardUtility">
            <summary>
                Dynamic Clipboard utility, allows you to save any type via a string tag, and retrieve it the same way.
            </summary>
        </member>
        <member name="M:TeleCore.StaticData.ToDef``1(System.UInt16)">
            <summary>
                Returns the relative Def object assignable to the provided ID.
            </summary>
            <param name="id">The ID of the Def.</param>
            <typeparam name="TDef">The Def type to search through.</typeparam>
            <returns>A unique Def instance as identified by the id.</returns>
        </member>
        <member name="M:TeleCore.StaticData.ToID``1(``0)">
            <summary>
                Turns a Def to its relative ID.
                <para>Can be used to handle Defs in a more lightweight way without assigning references to objects.</para>
            </summary>
            <param name="def">The Def instance.</param>
            <typeparam name="TDef">The Def type to assign the ID from.</typeparam>
            <returns>A unique ID for the Def instance of the given Def type.</returns>
        </member>
        <member name="M:TeleCore.CellGen.SectorCells(Verse.IntVec3,Verse.Map,System.Single,System.Single,System.Single,System.Boolean,System.Predicate{Verse.IntVec3})">
            <summary>
                Calculates a circular sector of <see cref="T:Verse.IntVec3" /> cells. Recommended to cache the result.
            </summary>
            <param name="center">Center of circle.</param>
            <param name="map">Map reference.</param>
            <param name="radius">Radius of circle.</param>
            <param name="angle">Angle size of the sector.</param>
            <param name="rotation">Rotation of the sector, 0 would make the sector "go" upwards.</param>
            <param name="useCenter">Uses the center cells as part of the sector.</param>
            <param name="validator">Additional validator to exclude or include cells.</param>
        </member>
        <member name="M:TeleCore.CellGen.OffsetIntvecs(System.Collections.Generic.IEnumerable{Verse.IntVec3},Verse.IntVec3)">
            <summary>
                Offsets a list of cells by a given reference cell.
            </summary>
        </member>
        <member name="M:TeleCore.CellGen.CornerVec3s(Verse.IntVec3)">
            <summary>
            </summary>
        </member>
        <member name="M:TeleCore.CellGen.CornerVecs(Verse.IntVec3)">
            <summary>
            </summary>
        </member>
        <member name="M:TeleCore.CellGen.PointsOnLineOfSightWithHeight(UnityEngine.Vector3,UnityEngine.Vector3,System.Single)">
            <summary>
            </summary>
        </member>
        <member name="M:TeleCore.CellUtils.Rot4Relative(Verse.IntVec3,Verse.IntVec3)">
            <summary>
                Compares two directly adjacent cells to determine the <see cref="T:Verse.Rot4" /> direction of <paramref name="other" />
                relative of <paramref name="cell" />.
            </summary>
            <returns>The <see cref="T:Verse.Rot4" /> from <paramref name="cell" /> 'looking' towards <paramref name="other" />.</returns>
        </member>
        <member name="M:TeleCore.GenData.IsElectricallyPowered(Verse.ThingWithComps,System.Boolean@)">
            <summary>
                Defines whether a structure is powered by electricity and returns whether it actually uses power.
            </summary>
        </member>
        <member name="M:TeleCore.GenData.IsPoweredOn(Verse.ThingWithComps)">
            <summary>
                If the thing uses a PowerComp, returns the PowerOn property, otherwise returns true if no PowerComp exists.
            </summary>
        </member>
        <member name="M:TeleCore.GenData.IsReserved(Verse.Thing,Verse.Map,Verse.Pawn@)">
            <summary>
                Checks whether a thing is reserved by any pawn.
            </summary>
        </member>
        <member name="M:TeleCore.GenData.NeighborRoomOf(Verse.Building,Verse.Room)">
            <summary>
            </summary>
        </member>
        <member name="M:TeleCore.GenData.GetRoomFast(Verse.IntVec3,Verse.Map)">
            <summary>
                Returns the current room at a position.
            </summary>
        </member>
        <member name="M:TeleCore.GenData.GetRoomIndirect(Verse.Thing)">
            <summary>
            </summary>
        </member>
        <member name="M:TeleCore.GenData.GetMapInfo``1(Verse.Map)">
            <summary>
                Get the desired <see cref="T:TeleCore.MapInformation" /> based on type of <typeparamref name="T" />.
            </summary>
        </member>
        <member name="M:TeleCore.GenData.GetDesignatorFor``1(Verse.BuildableDef)">
            <summary>
                Get the desired <see cref="T:Verse.Designator" /> based on type of <typeparamref name="T" />.
            </summary>
        </member>
        <member name="M:TeleCore.GenData.RoomTracker(Verse.Room)">
            <returns>The main <see cref="T:TeleCore.RoomTracker" /> object of the <paramref name="room" />.</returns>
        </member>
        <member name="M:TeleCore.GenData.GetRoomComp``1(Verse.Room)">
            <summary>
                Get the desired <see cref="T:TeleCore.RoomComponent" /> based on type of <typeparamref name="T" />.
            </summary>
        </member>
        <member name="M:TeleCore.LongTickHandler.EnqueueActionForMainThread(System.Action)">
            <summary>
                Enqueues an action to be run once on the main thread when available.
            </summary>
        </member>
        <member name="M:TeleCore.LongTickHandler.RegisterTickAction(System.Action)">
            <summary>
                Registers an action to be ticked every single tick.
            </summary>
        </member>
        <member name="M:TeleCore.LongTickHandler.AddTaggedAction(System.Action,TeleCore.TeleUpdateManager.TaggedActionType,System.String)">
            <summary>
            </summary>
        </member>
        <member name="M:TeleCore.TeleFlooder.Flood(Verse.Map,Verse.CellRect,System.Action{Verse.IntVec3},System.Predicate{Verse.IntVec3},System.Int32)">
            <summary>
                Floods an area from an initial <see cref="T:Verse.CellRect" />, processing and validating cells as it goes.
            </summary>
        </member>
        <member name="M:TeleCore.TWidgets.RectOnPos(UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
                Creates a rect on a given position with a size.
            </summary>
            <param name="pos">Center of the new Rect.</param>
            <param name="size">Size of the new Rect.</param>
        </member>
        <member name="M:TeleCore.TWidgets.AbsorbInput(UnityEngine.Rect)">
            <summary>
                If clicked inside of this, the event is consumed and wont be used later in the current frame.
            </summary>
        </member>
        <member name="T:TeleCore.Building_TeleTurret">
            <summary>
            </summary>
        </member>
        <member name="M:TeleCore.Verb_Tele.AdjustedTarget(Verse.LocalTargetInfo,Verse.ShootLine@,Verse.ProjectileHitFlags@)">
            <summary>
                Applies the vanilla target "miss" chance on an intended target
            </summary>
        </member>
        <member name="T:TeleCore.DynamicTextureParameter">
            <summary>
                Allows you to set <see cref="T:UnityEngine.Texture2D" /> parameters depending on the <see cref="T:Verse.Graphic" /> type for custom
                shaders
            </summary>
        </member>
        <member name="T:TeleCore.ThrownEffectInfo">
            <summary>
                Holds and builds upon initial effect spawn data, providing necessary references down the line
            </summary>
        </member>
        <member name="T:TeleCore.FXBuilding">
            <summary>
                A basic implementation of the <see cref="T:TeleCore.IFXLayerProvider" /> interface, uses <see cref="T:Verse.Building" /> as a base
                class.
            </summary>
        </member>
        <member name="T:TeleCore.FXPawn">
            <summary>
                A basic implementation of the <see cref="T:TeleCore.IFXLayerProvider" /> interface, uses <see cref="T:Verse.Pawn" /> as a base class.
            </summary>
        </member>
        <member name="T:TeleCore.FXThing">
            <summary>
                A basic implementation of the <see cref="T:TeleCore.IFXLayerProvider" /> interface, uses <see cref="T:Verse.ThingWithComps" /> as a
                base class.
            </summary>
        </member>
    </members>
</doc>
